var documenterSearchIndex = {"docs":
[{"location":"Options/#Download-Options-Data","page":"Options","title":"Download Options Data","text":"","category":"section"},{"location":"Options/","page":"Options","title":"Options","text":"get_Options","category":"page"},{"location":"Options/#YFinance.get_Options","page":"Options","title":"YFinance.get_Options","text":"get_Options(symbol::String)\n\nRetrievs options data from Yahoo Finance stored in a Dictionary with two items. One contains Call options the other Put options. These subitems are dictionaries themselves. The call and put options Dictionaries can readily be transformed to a DataFrame.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty dictionary is returned.\n\nExamples\n\njulia> get_Options(\"AAPL\")\nDict{String, Dict{String, Vector{Any}}} with 2 entries:\n\"calls\" => Dict(\"percentChange\"=>[ -2.90804  …   0], \"expiration\"=>[DateTime(\"2022-12-09T00:…  \n\"puts\"  => Dict(\"percentChange\"=>[0,  …   0], \"expiration\"=>[DateTime(\"2022-12-09T00:00:00\"), DateTime(\"20…\n\njulia> using DataFrames\njulia> get_Options(\"AAPL\")[\"calls\"] |> DataFrame\n65×16 DataFrame\nRow │ ask    bid    change     contractSize  contractSymbol       currency  exp ⋯\n    │ Any    Any    Any        Any           Any                  Any       Any ⋯\n────┼────────────────────────────────────────────────────────────────────────────\n    1 │ 94.3   94.1   0          REGULAR       AAPL221209C00050000  USD       202 ⋯\n    2 │ 84.3   84.15  0          REGULAR       AAPL221209C00060000  USD       202  \n    ⋮  │   ⋮      ⋮        ⋮           ⋮                 ⋮              ⋮          ⋱  \n    64 │ 0.01   0      0          REGULAR       AAPL221209C00240000  USD       202  \n    65 │ 0      0      0          REGULAR       AAPL221209C00250000  USD       202  \n                                                    10 columns and 61 rows omitted\n\njulia> using DataFrames\njulia> data  = get_Options(\"AAPL\")\njulia> vcat( [DataFrame(i) for i in values(data)]...)\n124×16 DataFrame\nRow │ ask    bid    change     contractSize  contractSymbol       cur ⋯\n    │ Any    Any    Any        Any           Any                  Any ⋯\n────┼──────────────────────────────────────────────────────────────────\n    1 │ 94.3   94.1   0          REGULAR       AAPL221209C00050000  USD ⋯\n    2 │ 84.55  84.35  0          REGULAR       AAPL221209C00060000  USD  \n    ⋮  │   ⋮      ⋮        ⋮           ⋮                 ⋮               ⋱ \n123 │ 75.85  75.15  0          REGULAR       AAPL221209P00220000  USD  \n124 │ 85.85  85.15  0          REGULAR       AAPL221209P00230000  USD  \n                                        11 columns and 120 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"Prices/#Download-Price-Data","page":"Prices","title":"Download Price Data","text":"","category":"section"},{"location":"Prices/","page":"Prices","title":"Prices","text":"get_prices","category":"page"},{"location":"Prices/#YFinance.get_prices","page":"Prices","title":"YFinance.get_prices","text":"get_prices(symbol::AbstractString; range::AbstractString=\"1mo\", interval::AbstractString=\"1d\",startdt=\"\", enddt=\"\",prepost=false,autoadjust=true,timeout = 10,throw_error=false)\n\nRetrievs prices from Yahoo Finance.\n\nArguments\n\nSmybol is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)\n\nYou can either provide a range or a startdt and an enddt.\n\nrange takes the following values: \"1d\",\"5d\",\"1mo\",\"3mo\",\"6mo\",\"1y\",\"2y\",\"5y\",\"10y\",\"ytd\",\"max\"\nstartdt and enddt take the following types: ::Date,::DateTime, or a String of the following form yyyy-mm-dd\nprepost is a boolean indicating whether pre and post periods should be included. Defaults to false\nautoadjust defaults to true. It adjusts open, high, low, close prices, and volume by multiplying by the ratio between the close and the adjusted close prices - only available for intervals of 1d and up. \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty dictionary is returned.\nexchangelocaltime::Bool defaults to false. If set to true the timestamp corresponds to the exchange local time else to GMT.\n\nExamples\n\njulia> get_prices(\"AAPL\",range=\"1d\",interval=\"90m\")\nDict{String, Any} with 7 entries:\n\"vol\"    => [10452686, 0]\n\"ticker\" => \"AAPL\"\n\"high\"   => [142.55, 142.045]\n\"open\"   => [142.34, 142.045]\n\"timestamp\"     => [DateTime(\"2022-12-09T14:30:00\"), DateTime(\"2022-12-09T15:08:33\")]\n\"low\"    => [140.9, 142.045]\n\"close\"  => [142.28, 142.045]\n\nCan be easily converted to a DataFrame\n\njulia> using DataFrames\njulia> get_prices(\"AAPL\",range=\"1d\",interval=\"90m\") |> DataFrame\n2×7 DataFrame\nRow │ close    timestamp            high     low      open     ticker  vol      \n    │ Float64  DateTime             Float64  Float64  Float64  String  Int64    \n────┼───────────────────────────────────────────────────────────────────────────\n    1 │  142.28  2022-12-09T14:30:00   142.55   140.9    142.34  AAPL    10452686\n    2 │  142.19  2022-12-09T15:08:03   142.19   142.19   142.19  AAPL           0\n\nBroadcasting\n\njulia> get_prices.([\"AAPL\",\"NFLX\"],range=\"1d\",interval=\"90m\")\n2-element Vector{Dict{String, Any}}:\nDict(\n    \"vol\" => [11085386, 0], \n    \"ticker\" => \"AAPL\", \n    \"high\" => [142.5500030517578, 142.2949981689453], \n    \"open\" => [142.33999633789062, 142.2949981689453], \n    \"timestamp\" => [DateTime(\"2022-12-09T14:30:00\"), DateTime(\"2022-12-09T15:15:34\")], \n    \"low\" => [140.89999389648438, 142.2949981689453], \n    \"close\" => [142.27000427246094, 142.2949981689453])\nDict(\n    \"vol\" => [4435651, 0], \n    \"ticker\" => \"NFLX\", \n    \"high\" => [326.29998779296875, 325.30999755859375], \n    \"open\" => [321.45001220703125, 325.30999755859375], \n    \"timestamp\" => [DateTime(\"2022-12-09T14:30:00\"), DateTime(\"2022-12-09T15:15:35\")], \n    \"low\" => [319.5199890136719, 325.30999755859375], \n    \"close\" => [325.79998779296875, 325.30999755859375])\n\nConverting it to a DataFrame:\n\njulia> using DataFrames\njulia> data = get_prices.([\"AAPL\",\"NFLX\"],range=\"1d\",interval=\"90m\");\njulia> vcat([DataFrame(i) for i in data]...)\n4×7 DataFrame\nRow │ close    timestamp            high     low      open     ticker  vol      \n    │ Float64  DateTime             Float64  Float64  Float64  String  Int64    \n────┼───────────────────────────────────────────────────────────────────────────\n    1 │  142.21  2022-12-09T14:30:00   142.55   140.9    142.34  AAPL    11111223\n    2 │  142.16  2022-12-09T15:12:20   142.16   142.16   142.16  AAPL           0\n    3 │  324.51  2022-12-09T14:30:00   326.3    319.52   321.45  NFLX     4407336\n    4 │  324.65  2022-12-09T15:12:20   324.65   324.65   324.65  NFLX           0\n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#All-Functions","page":"All Functions","title":"All Functions","text":"","category":"section"},{"location":"AllFunctions/","page":"All Functions","title":"All Functions","text":"Modules = [YFinance]","category":"page"},{"location":"AllFunctions/#YFinance.get_ESG-Tuple{String}","page":"All Functions","title":"YFinance.get_ESG","text":"get_ESG(symbol::String)\n\nRetrievs ESG Scores from Yahoo Finance stored in a Dictionary with two items. One, score, contains the companies ESG scores and individal Overall, Environment, Social and  Goverance Scores as well as a timestamp of type DateTime. The other,  peer_score, contains the peer group's scores. The subdictionaries can be transformed to DataFrames\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty dictionary is returned.\n\nExamples\n\njulia> get_ESG(\"AAPL\")\nDict{String, Dict{String, Any}} with 2 entries:\n\"peer_score\" => Dict(\"governanceScore\"=>Union{Missing, Float64}[63.2545, 63.454…  \n\"score\"      => Dict(\"governanceScore\"=>Union{Missing, Real}[62, 62, 62, 62, 62… \n\njulia> using DataFrames\njulia> get_ESG(\"AAPL\")[\"score\"] |> DataFrame\n96×6 DataFrame\nRow │ environmentScore  esgScore    governanceScore  socialScore  symbol  times ⋯\n    │ Real?             Real?       Real?            Real?        String  DateT ⋯\n────┼────────────────────────────────────────────────────────────────────────────\n    1 │            74          61               62           45     AAPL    2014- ⋯\n    2 │            74          60               62           45     AAPL    2014-  \n    ⋮  │        ⋮              ⋮              ⋮              ⋮         ⋮           ⋱\n    95 │       missing     missing          missing      missing     AAPL    2022-  \n    96 │             0.65       16.68             9.18         6.86  AAPL    2022-  \n                                                        1 column and 92 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_Fundamental-Tuple{AbstractString, AbstractString, AbstractString, Any, Any}","page":"All Functions","title":"YFinance.get_Fundamental","text":"get_Fundamental(symbol::AbstractString, item::AbstractString,interval::AbstractString, startdt, enddt)\n\nRetrievs financial statement information from Yahoo Finance stored in a Dictionary.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nitem::String can either be an entire financial statement or a subitem. Entire financial statements:\"incomestatement\", \"valuation\", \"cashflow\", \"balancesheet\".  To see valid sub items grouped by financial statement type in a Dictionary call `Fundamental_Types`  \ninterval::String can be one of \"annual\", \"quarterly\", \"monthly\"  \nstartdt and enddt take the following types: ::Date,::DateTime, or a String of the following form yyyy-mm-dd  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty dictionary is returned.\n\nExamples\n\njulia> get_Fundamental(\"NFLX\", \"income_statement\",\"quarterly\",\"2000-01-01\",\"2022-12-31\")\n\nDict{String, Any} with 39 entries:\n\"NetNonOperatingInterestIncomeExpense\" => Any[-94294000, -80917000, 8066000, 44771000, 88829000]\n\"NetInterestIncome\"                    => Any[-94294000, -80917000, 8066000, 44771000, 88829000]\n\"InterestExpense\"                      => Any[190429000, 189429000, 187579000, 175455000, 172575000]\n⋮                                      => ⋮\n\njulia> using DataFrames\njulia> get_Fundamental(\"AAPL\", \"InterestExpense\",\"quarterly\",\"2000-01-01\",\"2022-12-31\") |> DataFrame\n5×2 DataFrame\nRow │ InterestExpense  timestamp\n    │ Any              DateTime\n────┼──────────────────────────────────────\n    1 │ 672000000        2021-09-30T00:00:00 \n    2 │ 694000000        2021-12-31T00:00:00\n    3 │ 691000000        2022-03-31T00:00:00\n    4 │ 719000000        2022-06-30T00:00:00\n    5 │ 827000000        2022-09-30T00:00:00\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_Options-Tuple{String}","page":"All Functions","title":"YFinance.get_Options","text":"get_Options(symbol::String)\n\nRetrievs options data from Yahoo Finance stored in a Dictionary with two items. One contains Call options the other Put options. These subitems are dictionaries themselves. The call and put options Dictionaries can readily be transformed to a DataFrame.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty dictionary is returned.\n\nExamples\n\njulia> get_Options(\"AAPL\")\nDict{String, Dict{String, Vector{Any}}} with 2 entries:\n\"calls\" => Dict(\"percentChange\"=>[ -2.90804  …   0], \"expiration\"=>[DateTime(\"2022-12-09T00:…  \n\"puts\"  => Dict(\"percentChange\"=>[0,  …   0], \"expiration\"=>[DateTime(\"2022-12-09T00:00:00\"), DateTime(\"20…\n\njulia> using DataFrames\njulia> get_Options(\"AAPL\")[\"calls\"] |> DataFrame\n65×16 DataFrame\nRow │ ask    bid    change     contractSize  contractSymbol       currency  exp ⋯\n    │ Any    Any    Any        Any           Any                  Any       Any ⋯\n────┼────────────────────────────────────────────────────────────────────────────\n    1 │ 94.3   94.1   0          REGULAR       AAPL221209C00050000  USD       202 ⋯\n    2 │ 84.3   84.15  0          REGULAR       AAPL221209C00060000  USD       202  \n    ⋮  │   ⋮      ⋮        ⋮           ⋮                 ⋮              ⋮          ⋱  \n    64 │ 0.01   0      0          REGULAR       AAPL221209C00240000  USD       202  \n    65 │ 0      0      0          REGULAR       AAPL221209C00250000  USD       202  \n                                                    10 columns and 61 rows omitted\n\njulia> using DataFrames\njulia> data  = get_Options(\"AAPL\")\njulia> vcat( [DataFrame(i) for i in values(data)]...)\n124×16 DataFrame\nRow │ ask    bid    change     contractSize  contractSymbol       cur ⋯\n    │ Any    Any    Any        Any           Any                  Any ⋯\n────┼──────────────────────────────────────────────────────────────────\n    1 │ 94.3   94.1   0          REGULAR       AAPL221209C00050000  USD ⋯\n    2 │ 84.55  84.35  0          REGULAR       AAPL221209C00060000  USD  \n    ⋮  │   ⋮      ⋮        ⋮           ⋮                 ⋮               ⋱ \n123 │ 75.85  75.15  0          REGULAR       AAPL221209P00220000  USD  \n124 │ 85.85  85.15  0          REGULAR       AAPL221209P00230000  USD  \n                                        11 columns and 120 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_calendar_events-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_calendar_events","text":"get_calendar_events(quoteSummary::JSON3.Object)\n\nRetrievs calendar events from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_calendar_events\nDict{String, Any} with 3 entries:\n  \"earnings_dates\"  => [DateTime(\"2023-01-25T10:59:00\"), DateTime(\"2023-01-30T12:00:00\")]\n  \"dividend_date\"   => DateTime(\"2022-11-10T00:00:00\")\n  \"exdividend_date\" => DateTime(\"2022-11-04T00:00:00\")\n\njulia> get_calendar_events(\"AAPL\")\nDict{String, Any} with 3 entries:\n  \"earnings_dates\"  => [DateTime(\"2023-01-25T10:59:00\"), DateTime(\"2023-01-30T12:00:00\")]\n  \"dividend_date\"   => DateTime(\"2022-11-10T00:00:00\")\n  \"exdividend_date\" => DateTime(\"2022-11-04T00:00:00\")\n\njulia> using DataFrames\njulia> get_calendar_events(\"AAPL\") |> DataFrame\n2×3 DataFrame\n Row │ dividend_date        earnings_dates       exdividend_date     \n     │ DateTime             DateTime             DateTime\n─────┼───────────────────────────────────────────────────────────────\n   1 │ 2022-11-10T00:00:00  2023-01-25T10:59:00  2022-11-04T00:00:00\n   2 │ 2022-11-10T00:00:00  2023-01-30T12:00:00  2022-11-04T00:00:00\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_earnings_estimates-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_earnings_estimates","text":"get_earnings_estimates(quoteSummary::JSON3.Object)\n\nRetrievs the earnings estimates from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_earnings_estimates\nDict{String, Vector} with 3 entries:\n  \"quarter\"  => [\"4Q2021\", \"1Q2022\", \"2Q2022\", \"3Q2022\", \"4Q2022\"]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27, 2.01]\n  \"actual\"   => Union{Missing, Float64}[2.1, 1.52, 1.2, 1.29, missing]\n\njulia> get_earnings_estimates(\"AAPL\")\nDict{String, Vector} with 3 entries:\n  \"quarter\"  => [\"4Q2021\", \"1Q2022\", \"2Q2022\", \"3Q2022\", \"4Q2022\"]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27, 2.01]\n  \"actual\"   => Union{Missing, Float64}[2.1, 1.52, 1.2, 1.29, missing]\n\njulia> using DataFrames\njulia> get_earnings_estimates(\"AAPL\") |> DataFrame\n5×3 DataFrame\n Row │ actual      estimate  quarter \n     │ Float64?    Float64   String  \n─────┼───────────────────────────────\n   1 │       2.1       1.89  4Q2021\n   2 │       1.52      1.43  1Q2022\n   3 │       1.2       1.16  2Q2022\n   4 │       1.29      1.27  3Q2022\n   5 │ missing         2.01  4Q2022\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_eps-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_eps","text":"get_eps(quoteSummary::JSON3.Object)\n\nRetrievs the earnings per share from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_eps\nDict{String, Vector} with 4 entries:\n  \"surprise\" => [0.111, 0.063, 0.034, 0.016]\n  \"quarter\"  => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-03-31T00:00:00\"), DateTime(\"2022-06-30T00:00:00\"), DateTime(\"2022-09-30T00:00:00\")]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27]\n  \"actual\"   => [2.1, 1.52, 1.2, 1.29]\n\njulia> get_eps(\"AAPL\")\nDict{String, Vector} with 4 entries:\n  \"surprise\" => [0.111, 0.063, 0.034, 0.016]\n  \"quarter\"  => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-03-31T00:00:00\"), DateTime(\"2022-06-30T00:00:00\"), DateTime(\"2022-09-30T00:00:00\")]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27]\n  \"actual\"   => [2.1, 1.52, 1.2, 1.29]\n\njulia> using DataFrames\njulia> get_eps(\"AAPL\") |> DataFrame\n4×4 DataFrame\n Row │ actual   estimate  quarter              surprise \n     │ Float64  Float64   DateTime             Float64  \n─────┼──────────────────────────────────────────────────\n   1 │    2.1       1.89  2021-12-31T00:00:00     0.111\n   2 │    1.52      1.43  2022-03-31T00:00:00     0.063\n   3 │    1.2       1.16  2022-06-30T00:00:00     0.034\n   4 │    1.29      1.27  2022-09-30T00:00:00     0.016\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_insider_holders-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_insider_holders","text":"get_insider_holders(quoteSummary::JSON3.Object)\n\nRetrievs the insiders holdings from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_insider_holders\nDict{String, Vector} with 8 entries:\n  \"name\"                 => [\"ADAMS KATHERINE L\", \"BELL JAMES A\", \"JUNG AND…\n  \"lastestTransDate\"     => Union{Missing, DateTime}[DateTime(\"2022-10-03T0…\n  \"positionDirect\"       => Union{Missing, Int64}[427334, 34990, 139594, 31…\n  \"relation\"             => Union{Missing, String}[\"General Counsel\", \"Dire…\n  \"positionIndirect\"     => Union{Missing, Int64}[missing, missing, missing…\n  \"description\"          => Union{Missing, String}[\"Sale\", \"Stock Gift\", \"C…\n  \"positionDirectDate\"   => Union{Missing, DateTime}[DateTime(\"2022-10-03T0…\n  \"positionIndirectDate\" => Union{Missing, DateTime}[missing, missing, miss…\n\njulia> get_insider_holders(\"AAPL\")\nDict{String, Vector} with 8 entries:\n  \"name\"                 => [\"ADAMS KATHERINE L\", \"BELL JAMES A\", \"JUNG AND…\n   \"lastestTransDate\"     => Union{Missing, DateTime}[DateTime(\"2022-10-03T0…\n   \"positionDirect\"       => Union{Missing, Int64}[427334, 34990, 139594, 31…\n   \"relation\"             => Union{Missing, String}[\"General Counsel\", \"Dire…\n   \"positionIndirect\"     => Union{Missing, Int64}[missing, missing, missing…\n   \"description\"          => Union{Missing, String}[\"Sale\", \"Stock Gift\", \"C…\n   \"positionDirectDate\"   => Union{Missing, DateTime}[DateTime(\"2022-10-03T0…\n   \"positionIndirectDate\" => Union{Missing, DateTime}[missing, missing, miss…\n\njulia> using DataFrames\njulia> get_insider_holders(\"AAPL\") |> DataFrame\n10×8 DataFrame\n Row │ description                        lastestTransDate     name        ⋯\n     │ String?                            DateTime?            String      ⋯\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │ Sale                               2022-10-03T00:00:00  ADAMS KATHE ⋯\n   2 │ Stock Gift                         2022-05-06T00:00:00  BELL JAMES   \n   3 │ Conversion of Exercise of deriva…  2022-02-01T00:00:00  JUNG ANDREA  \n   4 │ Sale                               2022-11-22T00:00:00  KONDO CHRIS  \n   5 │ Sale                               2022-02-01T00:00:00  LEVINSON AR ⋯\n   6 │ Sale                               2022-10-28T00:00:00  MAESTRI LUC  \n   7 │ Sale                               2022-10-17T00:00:00  O'BRIEN DEI  \n   8 │ Conversion of Exercise of deriva…  2022-02-01T00:00:00  SUGAR RONAL  \n   9 │ Conversion of Exercise of deriva…  2022-02-01T00:00:00  WAGNER SUSA ⋯\n  10 │ Conversion of Exercise of deriva…  2022-09-30T00:00:00  WILLIAMS JE  \n                                                           6 columns omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_insider_transactions-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_insider_transactions","text":"get_insider_transactions(quoteSummary::JSON3.Object)\n\nRetrievs the insider transactions from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_insider_transactions\nDict{String, Vector} with 7 entries:\n  \"shares\"          => Union{Missing, Int64}[20200, 176299, 8053, 13136, 16…\n  \"filerRelation\"   => Union{Missing, String}[\"Officer\", \"Chief Financial O…\n  \"transactionText\" => Union{Missing, String}[\"Sale at price 148.72 per sha…\n  \"filerName\"       => [\"KONDO CHRISTOPHER\", \"MAESTRI LUCA\", \"O'BRIEN DEIRD…\n  \"ownership\"       => Union{Missing, String}[\"D\", \"D\", \"D\", \"D\", \"D\", \"D\",…\n  \"date\"            => Union{Missing, DateTime}[DateTime(\"2022-11-22T00:00:…\n  \"value\"           => Union{Missing, Int64}[3004144, 27493275, 1147150, mi…\n\njulia> get_insider_transactions(\"AAPL\")\nDict{String, Vector} with 7 entries:\n  \"shares\"          => Union{Missing, Int64}[20200, 176299, 8053, 13136, 16…\n  \"filerRelation\"   => Union{Missing, String}[\"Officer\", \"Chief Financial O…\n  \"transactionText\" => Union{Missing, String}[\"Sale at price 148.72 per sha…\n  \"filerName\"       => [\"KONDO CHRISTOPHER\", \"MAESTRI LUCA\", \"O'BRIEN DEIRD…\n  \"ownership\"       => Union{Missing, String}[\"D\", \"D\", \"D\", \"D\", \"D\", \"D\",…\n  \"date\"            => Union{Missing, DateTime}[DateTime(\"2022-11-22T00:00:…\n  \"value\"           => Union{Missing, Int64}[3004144, 27493275, 1147150, mi…\n\njulia> using DataFrames\njulia> get_insider_transactions(\"AAPL\") |> DataFrame\n75×7 DataFrame\n Row │ date                 filerName          filerRelation            ⋯\n     │ DateTime?            String             String?                  ⋯\n─────┼───────────────────────────────────────────────────────────────────\n   1 │ 2022-11-22T00:00:00  KONDO CHRISTOPHER  Officer                  ⋯\n   2 │ 2022-10-28T00:00:00  MAESTRI LUCA       Chief Financial Officer   \n   3 │ 2022-10-17T00:00:00  O'BRIEN DEIRDRE    Officer\n  ⋮  │          ⋮                   ⋮                     ⋮             ⋱\n  73 │ 2021-02-01T00:00:00  LOZANO MONICA C.   Director\n  74 │ 2021-02-01T00:00:00  GORE ALBERT A JR   Director                 ⋯\n  75 │ 2021-02-01T00:00:00  ADAMS KATHERINE L  General Counsel\n                                            4 columns and 69 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_institutional_ownership-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_institutional_ownership","text":"get_institutional_ownership(quoteSummary::JSON3.Object)\n\nRetrievs the institutional ownership from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_institutional_ownership\nDict{String, Vector} with 6 entries:\n  \"organization\" => [\"Vanguard Group, Inc. (The)\", \"Blackrock Inc.\", \"Be…\n  \"pctChange\"    => Union{Missing, Float64}[-0.0039, -0.0082, 0.0, -0.01…\n  \"pctHeld\"      => Union{Missing, Float64}[0.08, 0.0641, 0.0562, 0.0372…\n  \"position\"     => Union{Missing, Int64}[1272378901, 1020245185, 894802…\n  \"value\"        => Union{Missing, Int64}[180881389225, 145038059235, 12…\n  \"reportDate\"   => Union{Missing, DateTime}[DateTime(\"2022-09-30T00:00:…\n\njulia> get_institutional_ownership(\"AAPL\")\nDict{String, Vector} with 6 entries:\n  \"organization\" => [\"Vanguard Group, Inc. (The)\", \"Blackrock Inc.\", \"Be…\n  \"pctChange\"    => Union{Missing, Float64}[-0.0039, -0.0082, 0.0, -0.01…\n  \"pctHeld\"      => Union{Missing, Float64}[0.08, 0.0641, 0.0562, 0.0372…\n  \"position\"     => Union{Missing, Int64}[1272378901, 1020245185, 894802…\n  \"value\"        => Union{Missing, Int64}[180881389225, 145038059235, 12…\n  \"reportDate\"   => Union{Missing, DateTime}[DateTime(\"2022-09-30T00:00:…\n\njulia> using DataFrames\njulia> get_institutional_ownership(\"AAPL\") |> DataFrame\n10×6 DataFrame\n Row │ organization                   pctChange  pctHeld   position     ⋯\n     │ String                         Float64?   Float64?  Int64?       ⋯\n─────┼───────────────────────────────────────────────────────────────────\n   1 │ Vanguard Group, Inc. (The)       -0.0039    0.08    1272378901   ⋯\n   2 │ Blackrock Inc.                   -0.0082    0.0641  1020245185    \n   3 │ Berkshire Hathaway, Inc           0.0       0.0562   894802319    \n  ⋮  │               ⋮                    ⋮         ⋮          ⋮        ⋱\n   8 │ Morgan Stanley                    0.0015    0.0115   182728771    \n   9 │ Northern Trust Corporation       -0.0208    0.0111   176084862   ⋯\n  10 │ Bank of America Corporation      -0.0461    0.0089   142260591    \n                                             2 columns and 4 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_major_holders_breakdown-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_major_holders_breakdown","text":"get_major_holders_breakdown(quoteSummary::JSON3.Object)\n\nRetrievs the breakdown of the major holders from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_major_holders_breakdown\nDict{String, Real} with 4 entries:\n  \"institutionsCount\"            => 5525\n  \"insidersPercentHeld\"          => 0.00072\n  \"institutionsFloatPercentHeld\" => 0.60065\n  \"institutionsPercentHeld\"      => 0.60021\n\njulia> get_major_holders_breakdown(\"AAPL\")\nDict{String, Real} with 4 entries:\n  \"institutionsCount\"            => 5525\n  \"insidersPercentHeld\"          => 0.00072\n  \"institutionsFloatPercentHeld\" => 0.60065\n  \"institutionsPercentHeld\"      => 0.60021\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_prices-Tuple{AbstractString}","page":"All Functions","title":"YFinance.get_prices","text":"get_prices(symbol::AbstractString; range::AbstractString=\"1mo\", interval::AbstractString=\"1d\",startdt=\"\", enddt=\"\",prepost=false,autoadjust=true,timeout = 10,throw_error=false)\n\nRetrievs prices from Yahoo Finance.\n\nArguments\n\nSmybol is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)\n\nYou can either provide a range or a startdt and an enddt.\n\nrange takes the following values: \"1d\",\"5d\",\"1mo\",\"3mo\",\"6mo\",\"1y\",\"2y\",\"5y\",\"10y\",\"ytd\",\"max\"\nstartdt and enddt take the following types: ::Date,::DateTime, or a String of the following form yyyy-mm-dd\nprepost is a boolean indicating whether pre and post periods should be included. Defaults to false\nautoadjust defaults to true. It adjusts open, high, low, close prices, and volume by multiplying by the ratio between the close and the adjusted close prices - only available for intervals of 1d and up. \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty dictionary is returned.\nexchangelocaltime::Bool defaults to false. If set to true the timestamp corresponds to the exchange local time else to GMT.\n\nExamples\n\njulia> get_prices(\"AAPL\",range=\"1d\",interval=\"90m\")\nDict{String, Any} with 7 entries:\n\"vol\"    => [10452686, 0]\n\"ticker\" => \"AAPL\"\n\"high\"   => [142.55, 142.045]\n\"open\"   => [142.34, 142.045]\n\"timestamp\"     => [DateTime(\"2022-12-09T14:30:00\"), DateTime(\"2022-12-09T15:08:33\")]\n\"low\"    => [140.9, 142.045]\n\"close\"  => [142.28, 142.045]\n\nCan be easily converted to a DataFrame\n\njulia> using DataFrames\njulia> get_prices(\"AAPL\",range=\"1d\",interval=\"90m\") |> DataFrame\n2×7 DataFrame\nRow │ close    timestamp            high     low      open     ticker  vol      \n    │ Float64  DateTime             Float64  Float64  Float64  String  Int64    \n────┼───────────────────────────────────────────────────────────────────────────\n    1 │  142.28  2022-12-09T14:30:00   142.55   140.9    142.34  AAPL    10452686\n    2 │  142.19  2022-12-09T15:08:03   142.19   142.19   142.19  AAPL           0\n\nBroadcasting\n\njulia> get_prices.([\"AAPL\",\"NFLX\"],range=\"1d\",interval=\"90m\")\n2-element Vector{Dict{String, Any}}:\nDict(\n    \"vol\" => [11085386, 0], \n    \"ticker\" => \"AAPL\", \n    \"high\" => [142.5500030517578, 142.2949981689453], \n    \"open\" => [142.33999633789062, 142.2949981689453], \n    \"timestamp\" => [DateTime(\"2022-12-09T14:30:00\"), DateTime(\"2022-12-09T15:15:34\")], \n    \"low\" => [140.89999389648438, 142.2949981689453], \n    \"close\" => [142.27000427246094, 142.2949981689453])\nDict(\n    \"vol\" => [4435651, 0], \n    \"ticker\" => \"NFLX\", \n    \"high\" => [326.29998779296875, 325.30999755859375], \n    \"open\" => [321.45001220703125, 325.30999755859375], \n    \"timestamp\" => [DateTime(\"2022-12-09T14:30:00\"), DateTime(\"2022-12-09T15:15:35\")], \n    \"low\" => [319.5199890136719, 325.30999755859375], \n    \"close\" => [325.79998779296875, 325.30999755859375])\n\nConverting it to a DataFrame:\n\njulia> using DataFrames\njulia> data = get_prices.([\"AAPL\",\"NFLX\"],range=\"1d\",interval=\"90m\");\njulia> vcat([DataFrame(i) for i in data]...)\n4×7 DataFrame\nRow │ close    timestamp            high     low      open     ticker  vol      \n    │ Float64  DateTime             Float64  Float64  Float64  String  Int64    \n────┼───────────────────────────────────────────────────────────────────────────\n    1 │  142.21  2022-12-09T14:30:00   142.55   140.9    142.34  AAPL    11111223\n    2 │  142.16  2022-12-09T15:12:20   142.16   142.16   142.16  AAPL           0\n    3 │  324.51  2022-12-09T14:30:00   326.3    319.52   321.45  NFLX     4407336\n    4 │  324.65  2022-12-09T15:12:20   324.65   324.65   324.65  NFLX           0\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_quoteSummary-Tuple{String}","page":"All Functions","title":"YFinance.get_quoteSummary","text":"get_quoteSummary(symbol::String; item=nothing)\n\nRetrievs general information from Yahoo Finance stored in a JSON3 object.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nitem can either be a string or multiple items as a Vector of Strings. To see valid items call _QuoteSummary_Items (not all items are available for all types of securities)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty JSON3.Object is returned.\n\nExamples\n\njulia> get_quoteSummary(\"AAPL\")\n\nJSON3.Object{Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 31 entries:\n:assetProfile             => {…\n:recommendationTrend      => {…\n:cashflowStatementHistory => {…\n\n⋮                         => ⋮\njulia> get_quoteSummary(\"AAPL\",item = \"quoteType\")\nJSON3.Object{Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 13 entries:\n:exchange               => \"NMS\"\n:quoteType              => \"EQUITY\"\n:symbol                 => \"AAPL\"\n⋮                       => ⋮\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_recommendation_trend-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_recommendation_trend","text":"get_recommendation_trend(quoteSummary::JSON3.Object)\n\nRetrievs the recommendation trend from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_recommendation_trend\nDict{String, Vector} with 6 entries:\n  \"strongbuy\"  => [11, 11, 13, 13]\n  \"sell\"       => [0, 1, 1, 0]\n  \"buy\"        => [21, 26, 25, 20]\n  \"period\"     => [\"0m\", \"-1m\", \"-2m\", \"-3m\"]\n  \"hold\"       => [6, 5, 6, 8]\n  \"strongsell\" => [0, 0, 0, 0]\n\njulia> get_recommendation_trend(\"AAPL\")\nDict{String, Vector} with 6 entries:\n  \"strongbuy\"  => [11, 11, 13, 13]\n  \"sell\"       => [0, 1, 1, 0]\n  \"buy\"        => [21, 26, 25, 20]\n  \"period\"     => [\"0m\", \"-1m\", \"-2m\", \"-3m\"]\n  \"hold\"       => [6, 5, 6, 8]\n  \"strongsell\" => [0, 0, 0, 0]\n  \njulia> using DataFrames\njulia> get_recommendation_trend(\"AAPL\") |> DataFrame\n4×6 DataFrame\n Row │ buy    hold   period  sell   strongbuy  strongsell \n     │ Int64  Int64  String  Int64  Int64      Int64      \n─────┼────────────────────────────────────────────────────\n   1 │    21      6  0m          0         11           0\n   2 │    26      5  -1m         1         11           0\n   3 │    25      6  -2m         1         13           0\n   4 │    20      8  -3m         0         13           0\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_sector_industry-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_sector_industry","text":"get_sector_industry(quoteSummary::JSON3.Object)\n\nRetrievs the Sector and Industry from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_get_quoteSummary(\"AAPL\") |> sector_industry\nDict{String, String} with 2 entries:\n  \"industry\" => \"Consumer Electronics\"\n  \"sector\"   => \"Technology\"\n\njulia> get_sector_industry(\"AAPL\")\nDict{String, String} with 2 entries:\n  \"industry\" => \"Consumer Electronics\"\n  \"sector\"   => \"Technology\"\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_summary_detail-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_summary_detail","text":"get_summary_detail(quoteSummary::JSON3.Object)\n\nRetrievs the summaryDetail Item from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_summary_detail\nDict{String, Any} with 41 entries:\n  \"tradeable\"                  => false\n  \"dayLow\"                     => 140.91\n  \"coinMarketCapLink\"          => nothing\n  \"priceHint\"                  => 2\n  \"regularMarketPreviousClose\" => 142.65\n  \"askSize\"                    => 900\n  ⋮                            => ⋮\n\njulia> get_summary_detail(\"AAPL\")\nDict{String, Any} with 41 entries:\n  \"tradeable\"                  => false\n  \"dayLow\"                     => 140.91\n  \"coinMarketCapLink\"          => nothing\n  \"priceHint\"                  => 2\n  \"regularMarketPreviousClose\" => 142.65\n  \"askSize\"                    => 900\n  ⋮                            => ⋮\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_upgrade_downgrade_history-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_upgrade_downgrade_history","text":"get_upgrade_downgrade_history(quoteSummary::JSON3.Object)\n\nRetrievs the upgrade and downgrade history from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_upgrade_downgrade_history\nDict{String, Vector} with 5 entries:\n  \"firm\"      => [\"UBS\", \"Morgan Stanley\", \"B of A Securities\", \"Barclay…\n  \"action\"    => Union{Missing, String}[\"main\", \"main\", \"main\", \"main\", …\n  \"fromGrade\" => Union{Missing, String}[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", …\n  \"date\"      => Union{Missing, DateTime}[DateTime(\"2022-11-08T12:17:03\"…\n  \"toGrade\"   => Union{Missing, String}[\"Buy\", \"Overweight\", \"Neutral\", …\n\njulia> get_upgrade_downgrade_history(\"AAPL\")\nDict{String, Vector} with 5 entries:\n  \"firm\"      => [\"UBS\", \"Morgan Stanley\", \"B of A Securities\", \"Barclay…\n  \"action\"    => Union{Missing, String}[\"main\", \"main\", \"main\", \"main\", …\n  \"fromGrade\" => Union{Missing, String}[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", …\n  \"date\"      => Union{Missing, DateTime}[DateTime(\"2022-11-08T12:17:03\"…\n  \"toGrade\"   => Union{Missing, String}[\"Buy\", \"Overweight\", \"Neutral\", …\n  \njulia> using DataFrames\njulia> get_upgrade_downgrade_history(\"AAPL\") |> DataFrame\n871×5 DataFrame\n Row │ action   date                 firm               fromGrade  toGr ⋯\n     │ String?  DateTime?            String             String?    Stri ⋯\n─────┼───────────────────────────────────────────────────────────────────\n   1 │ main     2022-11-08T12:17:03  UBS                           Buy  ⋯\n   2 │ main     2022-11-08T12:14:23  Morgan Stanley                Over  \n   3 │ main     2022-11-07T13:08:30  B of A Securities             Neut  \n  ⋮  │    ⋮              ⋮                   ⋮              ⋮           ⋱\n 870 │ main     2012-03-08T07:33:00  FBN Securities                Outp  \n 871 │ main     2012-02-09T08:17:00  Canaccord Genuity             Buy  ⋯\n                                             1 column and 866 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_valid_symbols-Tuple{AbstractString}","page":"All Functions","title":"YFinance.get_valid_symbols","text":"get_valid_symbols(symbol::AbstractString)\n\nTakes a symbol. If the symbol is valid it returns the symbol in a vector if not it returns and empy vector.\n\nArguments\n\nsmybol::AbstractString is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \n\nExamples\n\njulia> get_valid_symbols(\"AAPL\")\n1-element Vector{String}:\n \"AAPL\"\n\njulia> get_valid_symbols(\"asdfs\")\n String[]\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_valid_symbols-Tuple{AbstractVector{<:AbstractString}}","page":"All Functions","title":"YFinance.get_valid_symbols","text":"get_valid_symbols(symbol::AbstractVector{<:AbstractString})\n\nTakes a AbstractVector of symbols and returns only the valid ones.\n\nArguments\n\nsmybol::AbstractVector{<:AbstractString} is a vector of tickers (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \n\nExamples\n\njulia> get_valid_symbols(\"AAPL\",\"AMD\",\"asdfs\")\n2-element Vector{String}:\n \"AAPL\"\n \"AMD\"\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.validate_symbol-Tuple{AbstractString}","page":"All Functions","title":"YFinance.validate_symbol","text":"validate_symbol(symbol::AbstractString)\n\nValidates a Symbol (Ticker). Returns true if the ticker is valid and false if the ticker is not valid.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \n\nHow it works\n\nChecks if the HTTP request works (status 200) or whether the request errors (common status in this case: 404)    \n\n\n\n\n\n","category":"method"},{"location":"ESG/#Download-ESG-Data","page":"ESG","title":"Download ESG Data","text":"","category":"section"},{"location":"ESG/","page":"ESG","title":"ESG","text":"get_ESG","category":"page"},{"location":"ESG/#YFinance.get_ESG","page":"ESG","title":"YFinance.get_ESG","text":"get_ESG(symbol::String)\n\nRetrievs ESG Scores from Yahoo Finance stored in a Dictionary with two items. One, score, contains the companies ESG scores and individal Overall, Environment, Social and  Goverance Scores as well as a timestamp of type DateTime. The other,  peer_score, contains the peer group's scores. The subdictionaries can be transformed to DataFrames\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty dictionary is returned.\n\nExamples\n\njulia> get_ESG(\"AAPL\")\nDict{String, Dict{String, Any}} with 2 entries:\n\"peer_score\" => Dict(\"governanceScore\"=>Union{Missing, Float64}[63.2545, 63.454…  \n\"score\"      => Dict(\"governanceScore\"=>Union{Missing, Real}[62, 62, 62, 62, 62… \n\njulia> using DataFrames\njulia> get_ESG(\"AAPL\")[\"score\"] |> DataFrame\n96×6 DataFrame\nRow │ environmentScore  esgScore    governanceScore  socialScore  symbol  times ⋯\n    │ Real?             Real?       Real?            Real?        String  DateT ⋯\n────┼────────────────────────────────────────────────────────────────────────────\n    1 │            74          61               62           45     AAPL    2014- ⋯\n    2 │            74          60               62           45     AAPL    2014-  \n    ⋮  │        ⋮              ⋮              ⋮              ⋮         ⋮           ⋱\n    95 │       missing     missing          missing      missing     AAPL    2022-  \n    96 │             0.65       16.68             9.18         6.86  AAPL    2022-  \n                                                        1 column and 92 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"Fundamental/#Download-Fundamental-Data","page":"Fundamental","title":"Download Fundamental Data","text":"","category":"section"},{"location":"Fundamental/","page":"Fundamental","title":"Fundamental","text":"get_Fundamental","category":"page"},{"location":"Fundamental/#YFinance.get_Fundamental","page":"Fundamental","title":"YFinance.get_Fundamental","text":"get_Fundamental(symbol::AbstractString, item::AbstractString,interval::AbstractString, startdt, enddt)\n\nRetrievs financial statement information from Yahoo Finance stored in a Dictionary.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nitem::String can either be an entire financial statement or a subitem. Entire financial statements:\"incomestatement\", \"valuation\", \"cashflow\", \"balancesheet\".  To see valid sub items grouped by financial statement type in a Dictionary call `Fundamental_Types`  \ninterval::String can be one of \"annual\", \"quarterly\", \"monthly\"  \nstartdt and enddt take the following types: ::Date,::DateTime, or a String of the following form yyyy-mm-dd  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty dictionary is returned.\n\nExamples\n\njulia> get_Fundamental(\"NFLX\", \"income_statement\",\"quarterly\",\"2000-01-01\",\"2022-12-31\")\n\nDict{String, Any} with 39 entries:\n\"NetNonOperatingInterestIncomeExpense\" => Any[-94294000, -80917000, 8066000, 44771000, 88829000]\n\"NetInterestIncome\"                    => Any[-94294000, -80917000, 8066000, 44771000, 88829000]\n\"InterestExpense\"                      => Any[190429000, 189429000, 187579000, 175455000, 172575000]\n⋮                                      => ⋮\n\njulia> using DataFrames\njulia> get_Fundamental(\"AAPL\", \"InterestExpense\",\"quarterly\",\"2000-01-01\",\"2022-12-31\") |> DataFrame\n5×2 DataFrame\nRow │ InterestExpense  timestamp\n    │ Any              DateTime\n────┼──────────────────────────────────────\n    1 │ 672000000        2021-09-30T00:00:00 \n    2 │ 694000000        2021-12-31T00:00:00\n    3 │ 691000000        2022-03-31T00:00:00\n    4 │ 719000000        2022-06-30T00:00:00\n    5 │ 827000000        2022-09-30T00:00:00\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Download-Quote-Summary-Data","page":"QuoteSummary","title":"Download Quote Summary Data","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"The quote summary item contains tons of different kinds of information. Not all information is available for all tickers. The get_quoteSummary function returns all items available for the ticker.","category":"page"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_quoteSummary","category":"page"},{"location":"QuoteSummary/#YFinance.get_quoteSummary","page":"QuoteSummary","title":"YFinance.get_quoteSummary","text":"get_quoteSummary(symbol::String; item=nothing)\n\nRetrievs general information from Yahoo Finance stored in a JSON3 object.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nitem can either be a string or multiple items as a Vector of Strings. To see valid items call _QuoteSummary_Items (not all items are available for all types of securities)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty JSON3.Object is returned.\n\nExamples\n\njulia> get_quoteSummary(\"AAPL\")\n\nJSON3.Object{Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 31 entries:\n:assetProfile             => {…\n:recommendationTrend      => {…\n:cashflowStatementHistory => {…\n\n⋮                         => ⋮\njulia> get_quoteSummary(\"AAPL\",item = \"quoteType\")\nJSON3.Object{Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 13 entries:\n:exchange               => \"NMS\"\n:quoteType              => \"EQUITY\"\n:symbol                 => \"AAPL\"\n⋮                       => ⋮\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Sub-Items","page":"QuoteSummary","title":"Sub-Items","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"The below functions can extract certain items from the Yahoo quoteSummary. The functions below return Dictionaries that can readily be piped into a DataFrame.","category":"page"},{"location":"QuoteSummary/#Calendar-Events","page":"QuoteSummary","title":"Calendar Events","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_calendar_events","category":"page"},{"location":"QuoteSummary/#YFinance.get_calendar_events","page":"QuoteSummary","title":"YFinance.get_calendar_events","text":"get_calendar_events(quoteSummary::JSON3.Object)\n\nRetrievs calendar events from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_calendar_events\nDict{String, Any} with 3 entries:\n  \"earnings_dates\"  => [DateTime(\"2023-01-25T10:59:00\"), DateTime(\"2023-01-30T12:00:00\")]\n  \"dividend_date\"   => DateTime(\"2022-11-10T00:00:00\")\n  \"exdividend_date\" => DateTime(\"2022-11-04T00:00:00\")\n\njulia> get_calendar_events(\"AAPL\")\nDict{String, Any} with 3 entries:\n  \"earnings_dates\"  => [DateTime(\"2023-01-25T10:59:00\"), DateTime(\"2023-01-30T12:00:00\")]\n  \"dividend_date\"   => DateTime(\"2022-11-10T00:00:00\")\n  \"exdividend_date\" => DateTime(\"2022-11-04T00:00:00\")\n\njulia> using DataFrames\njulia> get_calendar_events(\"AAPL\") |> DataFrame\n2×3 DataFrame\n Row │ dividend_date        earnings_dates       exdividend_date     \n     │ DateTime             DateTime             DateTime\n─────┼───────────────────────────────────────────────────────────────\n   1 │ 2022-11-10T00:00:00  2023-01-25T10:59:00  2022-11-04T00:00:00\n   2 │ 2022-11-10T00:00:00  2023-01-30T12:00:00  2022-11-04T00:00:00\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Earnings-Estimates","page":"QuoteSummary","title":"Earnings Estimates","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_earnings_estimates","category":"page"},{"location":"QuoteSummary/#YFinance.get_earnings_estimates","page":"QuoteSummary","title":"YFinance.get_earnings_estimates","text":"get_earnings_estimates(quoteSummary::JSON3.Object)\n\nRetrievs the earnings estimates from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_earnings_estimates\nDict{String, Vector} with 3 entries:\n  \"quarter\"  => [\"4Q2021\", \"1Q2022\", \"2Q2022\", \"3Q2022\", \"4Q2022\"]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27, 2.01]\n  \"actual\"   => Union{Missing, Float64}[2.1, 1.52, 1.2, 1.29, missing]\n\njulia> get_earnings_estimates(\"AAPL\")\nDict{String, Vector} with 3 entries:\n  \"quarter\"  => [\"4Q2021\", \"1Q2022\", \"2Q2022\", \"3Q2022\", \"4Q2022\"]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27, 2.01]\n  \"actual\"   => Union{Missing, Float64}[2.1, 1.52, 1.2, 1.29, missing]\n\njulia> using DataFrames\njulia> get_earnings_estimates(\"AAPL\") |> DataFrame\n5×3 DataFrame\n Row │ actual      estimate  quarter \n     │ Float64?    Float64   String  \n─────┼───────────────────────────────\n   1 │       2.1       1.89  4Q2021\n   2 │       1.52      1.43  1Q2022\n   3 │       1.2       1.16  2Q2022\n   4 │       1.29      1.27  3Q2022\n   5 │ missing         2.01  4Q2022\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Earnings-Per-Share-(EPS)","page":"QuoteSummary","title":"Earnings Per Share (EPS)","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_eps","category":"page"},{"location":"QuoteSummary/#YFinance.get_eps","page":"QuoteSummary","title":"YFinance.get_eps","text":"get_eps(quoteSummary::JSON3.Object)\n\nRetrievs the earnings per share from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_eps\nDict{String, Vector} with 4 entries:\n  \"surprise\" => [0.111, 0.063, 0.034, 0.016]\n  \"quarter\"  => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-03-31T00:00:00\"), DateTime(\"2022-06-30T00:00:00\"), DateTime(\"2022-09-30T00:00:00\")]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27]\n  \"actual\"   => [2.1, 1.52, 1.2, 1.29]\n\njulia> get_eps(\"AAPL\")\nDict{String, Vector} with 4 entries:\n  \"surprise\" => [0.111, 0.063, 0.034, 0.016]\n  \"quarter\"  => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-03-31T00:00:00\"), DateTime(\"2022-06-30T00:00:00\"), DateTime(\"2022-09-30T00:00:00\")]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27]\n  \"actual\"   => [2.1, 1.52, 1.2, 1.29]\n\njulia> using DataFrames\njulia> get_eps(\"AAPL\") |> DataFrame\n4×4 DataFrame\n Row │ actual   estimate  quarter              surprise \n     │ Float64  Float64   DateTime             Float64  \n─────┼──────────────────────────────────────────────────\n   1 │    2.1       1.89  2021-12-31T00:00:00     0.111\n   2 │    1.52      1.43  2022-03-31T00:00:00     0.063\n   3 │    1.2       1.16  2022-06-30T00:00:00     0.034\n   4 │    1.29      1.27  2022-09-30T00:00:00     0.016\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Insider-Holdings","page":"QuoteSummary","title":"Insider Holdings","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_insider_holders","category":"page"},{"location":"QuoteSummary/#YFinance.get_insider_holders","page":"QuoteSummary","title":"YFinance.get_insider_holders","text":"get_insider_holders(quoteSummary::JSON3.Object)\n\nRetrievs the insiders holdings from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_insider_holders\nDict{String, Vector} with 8 entries:\n  \"name\"                 => [\"ADAMS KATHERINE L\", \"BELL JAMES A\", \"JUNG AND…\n  \"lastestTransDate\"     => Union{Missing, DateTime}[DateTime(\"2022-10-03T0…\n  \"positionDirect\"       => Union{Missing, Int64}[427334, 34990, 139594, 31…\n  \"relation\"             => Union{Missing, String}[\"General Counsel\", \"Dire…\n  \"positionIndirect\"     => Union{Missing, Int64}[missing, missing, missing…\n  \"description\"          => Union{Missing, String}[\"Sale\", \"Stock Gift\", \"C…\n  \"positionDirectDate\"   => Union{Missing, DateTime}[DateTime(\"2022-10-03T0…\n  \"positionIndirectDate\" => Union{Missing, DateTime}[missing, missing, miss…\n\njulia> get_insider_holders(\"AAPL\")\nDict{String, Vector} with 8 entries:\n  \"name\"                 => [\"ADAMS KATHERINE L\", \"BELL JAMES A\", \"JUNG AND…\n   \"lastestTransDate\"     => Union{Missing, DateTime}[DateTime(\"2022-10-03T0…\n   \"positionDirect\"       => Union{Missing, Int64}[427334, 34990, 139594, 31…\n   \"relation\"             => Union{Missing, String}[\"General Counsel\", \"Dire…\n   \"positionIndirect\"     => Union{Missing, Int64}[missing, missing, missing…\n   \"description\"          => Union{Missing, String}[\"Sale\", \"Stock Gift\", \"C…\n   \"positionDirectDate\"   => Union{Missing, DateTime}[DateTime(\"2022-10-03T0…\n   \"positionIndirectDate\" => Union{Missing, DateTime}[missing, missing, miss…\n\njulia> using DataFrames\njulia> get_insider_holders(\"AAPL\") |> DataFrame\n10×8 DataFrame\n Row │ description                        lastestTransDate     name        ⋯\n     │ String?                            DateTime?            String      ⋯\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │ Sale                               2022-10-03T00:00:00  ADAMS KATHE ⋯\n   2 │ Stock Gift                         2022-05-06T00:00:00  BELL JAMES   \n   3 │ Conversion of Exercise of deriva…  2022-02-01T00:00:00  JUNG ANDREA  \n   4 │ Sale                               2022-11-22T00:00:00  KONDO CHRIS  \n   5 │ Sale                               2022-02-01T00:00:00  LEVINSON AR ⋯\n   6 │ Sale                               2022-10-28T00:00:00  MAESTRI LUC  \n   7 │ Sale                               2022-10-17T00:00:00  O'BRIEN DEI  \n   8 │ Conversion of Exercise of deriva…  2022-02-01T00:00:00  SUGAR RONAL  \n   9 │ Conversion of Exercise of deriva…  2022-02-01T00:00:00  WAGNER SUSA ⋯\n  10 │ Conversion of Exercise of deriva…  2022-09-30T00:00:00  WILLIAMS JE  \n                                                           6 columns omitted\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Insider-Transactions","page":"QuoteSummary","title":"Insider Transactions","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_insider_transactions","category":"page"},{"location":"QuoteSummary/#YFinance.get_insider_transactions","page":"QuoteSummary","title":"YFinance.get_insider_transactions","text":"get_insider_transactions(quoteSummary::JSON3.Object)\n\nRetrievs the insider transactions from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_insider_transactions\nDict{String, Vector} with 7 entries:\n  \"shares\"          => Union{Missing, Int64}[20200, 176299, 8053, 13136, 16…\n  \"filerRelation\"   => Union{Missing, String}[\"Officer\", \"Chief Financial O…\n  \"transactionText\" => Union{Missing, String}[\"Sale at price 148.72 per sha…\n  \"filerName\"       => [\"KONDO CHRISTOPHER\", \"MAESTRI LUCA\", \"O'BRIEN DEIRD…\n  \"ownership\"       => Union{Missing, String}[\"D\", \"D\", \"D\", \"D\", \"D\", \"D\",…\n  \"date\"            => Union{Missing, DateTime}[DateTime(\"2022-11-22T00:00:…\n  \"value\"           => Union{Missing, Int64}[3004144, 27493275, 1147150, mi…\n\njulia> get_insider_transactions(\"AAPL\")\nDict{String, Vector} with 7 entries:\n  \"shares\"          => Union{Missing, Int64}[20200, 176299, 8053, 13136, 16…\n  \"filerRelation\"   => Union{Missing, String}[\"Officer\", \"Chief Financial O…\n  \"transactionText\" => Union{Missing, String}[\"Sale at price 148.72 per sha…\n  \"filerName\"       => [\"KONDO CHRISTOPHER\", \"MAESTRI LUCA\", \"O'BRIEN DEIRD…\n  \"ownership\"       => Union{Missing, String}[\"D\", \"D\", \"D\", \"D\", \"D\", \"D\",…\n  \"date\"            => Union{Missing, DateTime}[DateTime(\"2022-11-22T00:00:…\n  \"value\"           => Union{Missing, Int64}[3004144, 27493275, 1147150, mi…\n\njulia> using DataFrames\njulia> get_insider_transactions(\"AAPL\") |> DataFrame\n75×7 DataFrame\n Row │ date                 filerName          filerRelation            ⋯\n     │ DateTime?            String             String?                  ⋯\n─────┼───────────────────────────────────────────────────────────────────\n   1 │ 2022-11-22T00:00:00  KONDO CHRISTOPHER  Officer                  ⋯\n   2 │ 2022-10-28T00:00:00  MAESTRI LUCA       Chief Financial Officer   \n   3 │ 2022-10-17T00:00:00  O'BRIEN DEIRDRE    Officer\n  ⋮  │          ⋮                   ⋮                     ⋮             ⋱\n  73 │ 2021-02-01T00:00:00  LOZANO MONICA C.   Director\n  74 │ 2021-02-01T00:00:00  GORE ALBERT A JR   Director                 ⋯\n  75 │ 2021-02-01T00:00:00  ADAMS KATHERINE L  General Counsel\n                                            4 columns and 69 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Institutional-Ownership","page":"QuoteSummary","title":"Institutional Ownership","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_institutional_ownership","category":"page"},{"location":"QuoteSummary/#YFinance.get_institutional_ownership","page":"QuoteSummary","title":"YFinance.get_institutional_ownership","text":"get_institutional_ownership(quoteSummary::JSON3.Object)\n\nRetrievs the institutional ownership from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_institutional_ownership\nDict{String, Vector} with 6 entries:\n  \"organization\" => [\"Vanguard Group, Inc. (The)\", \"Blackrock Inc.\", \"Be…\n  \"pctChange\"    => Union{Missing, Float64}[-0.0039, -0.0082, 0.0, -0.01…\n  \"pctHeld\"      => Union{Missing, Float64}[0.08, 0.0641, 0.0562, 0.0372…\n  \"position\"     => Union{Missing, Int64}[1272378901, 1020245185, 894802…\n  \"value\"        => Union{Missing, Int64}[180881389225, 145038059235, 12…\n  \"reportDate\"   => Union{Missing, DateTime}[DateTime(\"2022-09-30T00:00:…\n\njulia> get_institutional_ownership(\"AAPL\")\nDict{String, Vector} with 6 entries:\n  \"organization\" => [\"Vanguard Group, Inc. (The)\", \"Blackrock Inc.\", \"Be…\n  \"pctChange\"    => Union{Missing, Float64}[-0.0039, -0.0082, 0.0, -0.01…\n  \"pctHeld\"      => Union{Missing, Float64}[0.08, 0.0641, 0.0562, 0.0372…\n  \"position\"     => Union{Missing, Int64}[1272378901, 1020245185, 894802…\n  \"value\"        => Union{Missing, Int64}[180881389225, 145038059235, 12…\n  \"reportDate\"   => Union{Missing, DateTime}[DateTime(\"2022-09-30T00:00:…\n\njulia> using DataFrames\njulia> get_institutional_ownership(\"AAPL\") |> DataFrame\n10×6 DataFrame\n Row │ organization                   pctChange  pctHeld   position     ⋯\n     │ String                         Float64?   Float64?  Int64?       ⋯\n─────┼───────────────────────────────────────────────────────────────────\n   1 │ Vanguard Group, Inc. (The)       -0.0039    0.08    1272378901   ⋯\n   2 │ Blackrock Inc.                   -0.0082    0.0641  1020245185    \n   3 │ Berkshire Hathaway, Inc           0.0       0.0562   894802319    \n  ⋮  │               ⋮                    ⋮         ⋮          ⋮        ⋱\n   8 │ Morgan Stanley                    0.0015    0.0115   182728771    \n   9 │ Northern Trust Corporation       -0.0208    0.0111   176084862   ⋯\n  10 │ Bank of America Corporation      -0.0461    0.0089   142260591    \n                                             2 columns and 4 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Major-Holders-Breakdown","page":"QuoteSummary","title":"Major Holders Breakdown","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_major_holders_breakdown","category":"page"},{"location":"QuoteSummary/#YFinance.get_major_holders_breakdown","page":"QuoteSummary","title":"YFinance.get_major_holders_breakdown","text":"get_major_holders_breakdown(quoteSummary::JSON3.Object)\n\nRetrievs the breakdown of the major holders from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_major_holders_breakdown\nDict{String, Real} with 4 entries:\n  \"institutionsCount\"            => 5525\n  \"insidersPercentHeld\"          => 0.00072\n  \"institutionsFloatPercentHeld\" => 0.60065\n  \"institutionsPercentHeld\"      => 0.60021\n\njulia> get_major_holders_breakdown(\"AAPL\")\nDict{String, Real} with 4 entries:\n  \"institutionsCount\"            => 5525\n  \"insidersPercentHeld\"          => 0.00072\n  \"institutionsFloatPercentHeld\" => 0.60065\n  \"institutionsPercentHeld\"      => 0.60021\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Analyst-Recommendation-Trend","page":"QuoteSummary","title":"Analyst Recommendation Trend","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_recommendation_trend","category":"page"},{"location":"QuoteSummary/#YFinance.get_recommendation_trend","page":"QuoteSummary","title":"YFinance.get_recommendation_trend","text":"get_recommendation_trend(quoteSummary::JSON3.Object)\n\nRetrievs the recommendation trend from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_recommendation_trend\nDict{String, Vector} with 6 entries:\n  \"strongbuy\"  => [11, 11, 13, 13]\n  \"sell\"       => [0, 1, 1, 0]\n  \"buy\"        => [21, 26, 25, 20]\n  \"period\"     => [\"0m\", \"-1m\", \"-2m\", \"-3m\"]\n  \"hold\"       => [6, 5, 6, 8]\n  \"strongsell\" => [0, 0, 0, 0]\n\njulia> get_recommendation_trend(\"AAPL\")\nDict{String, Vector} with 6 entries:\n  \"strongbuy\"  => [11, 11, 13, 13]\n  \"sell\"       => [0, 1, 1, 0]\n  \"buy\"        => [21, 26, 25, 20]\n  \"period\"     => [\"0m\", \"-1m\", \"-2m\", \"-3m\"]\n  \"hold\"       => [6, 5, 6, 8]\n  \"strongsell\" => [0, 0, 0, 0]\n  \njulia> using DataFrames\njulia> get_recommendation_trend(\"AAPL\") |> DataFrame\n4×6 DataFrame\n Row │ buy    hold   period  sell   strongbuy  strongsell \n     │ Int64  Int64  String  Int64  Int64      Int64      \n─────┼────────────────────────────────────────────────────\n   1 │    21      6  0m          0         11           0\n   2 │    26      5  -1m         1         11           0\n   3 │    25      6  -2m         1         13           0\n   4 │    20      8  -3m         0         13           0\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Up-and-Downgrade-History","page":"QuoteSummary","title":"Up- & Downgrade History","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_upgrade_downgrade_history","category":"page"},{"location":"QuoteSummary/#YFinance.get_upgrade_downgrade_history","page":"QuoteSummary","title":"YFinance.get_upgrade_downgrade_history","text":"get_upgrade_downgrade_history(quoteSummary::JSON3.Object)\n\nRetrievs the upgrade and downgrade history from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_upgrade_downgrade_history\nDict{String, Vector} with 5 entries:\n  \"firm\"      => [\"UBS\", \"Morgan Stanley\", \"B of A Securities\", \"Barclay…\n  \"action\"    => Union{Missing, String}[\"main\", \"main\", \"main\", \"main\", …\n  \"fromGrade\" => Union{Missing, String}[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", …\n  \"date\"      => Union{Missing, DateTime}[DateTime(\"2022-11-08T12:17:03\"…\n  \"toGrade\"   => Union{Missing, String}[\"Buy\", \"Overweight\", \"Neutral\", …\n\njulia> get_upgrade_downgrade_history(\"AAPL\")\nDict{String, Vector} with 5 entries:\n  \"firm\"      => [\"UBS\", \"Morgan Stanley\", \"B of A Securities\", \"Barclay…\n  \"action\"    => Union{Missing, String}[\"main\", \"main\", \"main\", \"main\", …\n  \"fromGrade\" => Union{Missing, String}[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", …\n  \"date\"      => Union{Missing, DateTime}[DateTime(\"2022-11-08T12:17:03\"…\n  \"toGrade\"   => Union{Missing, String}[\"Buy\", \"Overweight\", \"Neutral\", …\n  \njulia> using DataFrames\njulia> get_upgrade_downgrade_history(\"AAPL\") |> DataFrame\n871×5 DataFrame\n Row │ action   date                 firm               fromGrade  toGr ⋯\n     │ String?  DateTime?            String             String?    Stri ⋯\n─────┼───────────────────────────────────────────────────────────────────\n   1 │ main     2022-11-08T12:17:03  UBS                           Buy  ⋯\n   2 │ main     2022-11-08T12:14:23  Morgan Stanley                Over  \n   3 │ main     2022-11-07T13:08:30  B of A Securities             Neut  \n  ⋮  │    ⋮              ⋮                   ⋮              ⋮           ⋱\n 870 │ main     2012-03-08T07:33:00  FBN Securities                Outp  \n 871 │ main     2012-02-09T08:17:00  Canaccord Genuity             Buy  ⋯\n                                             1 column and 866 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Summary-Detail","page":"QuoteSummary","title":"Summary Detail","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_summary_detail","category":"page"},{"location":"QuoteSummary/#YFinance.get_summary_detail","page":"QuoteSummary","title":"YFinance.get_summary_detail","text":"get_summary_detail(quoteSummary::JSON3.Object)\n\nRetrievs the summaryDetail Item from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_summary_detail\nDict{String, Any} with 41 entries:\n  \"tradeable\"                  => false\n  \"dayLow\"                     => 140.91\n  \"coinMarketCapLink\"          => nothing\n  \"priceHint\"                  => 2\n  \"regularMarketPreviousClose\" => 142.65\n  \"askSize\"                    => 900\n  ⋮                            => ⋮\n\njulia> get_summary_detail(\"AAPL\")\nDict{String, Any} with 41 entries:\n  \"tradeable\"                  => false\n  \"dayLow\"                     => 140.91\n  \"coinMarketCapLink\"          => nothing\n  \"priceHint\"                  => 2\n  \"regularMarketPreviousClose\" => 142.65\n  \"askSize\"                    => 900\n  ⋮                            => ⋮\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Sector-and-Industry","page":"QuoteSummary","title":"Sector & Industry","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_sector_industry","category":"page"},{"location":"QuoteSummary/#YFinance.get_sector_industry","page":"QuoteSummary","title":"YFinance.get_sector_industry","text":"get_sector_industry(quoteSummary::JSON3.Object)\n\nRetrievs the Sector and Industry from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_get_quoteSummary(\"AAPL\") |> sector_industry\nDict{String, String} with 2 entries:\n  \"industry\" => \"Consumer Electronics\"\n  \"sector\"   => \"Technology\"\n\njulia> get_sector_industry(\"AAPL\")\nDict{String, String} with 2 entries:\n  \"industry\" => \"Consumer Electronics\"\n  \"sector\"   => \"Technology\"\n\n\n\n\n\n","category":"function"},{"location":"#YFinance.jl","page":"Home","title":"YFinance.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Download price, fundamental, and option data from Yahoo Finance   This is a side project and my first package so do not expect too much. ","category":"page"},{"location":"#***-LEGAL-DISCLAIMER-***","page":"Home","title":"*** LEGAL DISCLAIMER ***","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Yahoo!, Y!Finance, and Yahoo! finance are registered trademarks of Yahoo, Inc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"YFinance.jl is not affiliated with Yahoo, Inc. in any way. The data retreived can only be used for personal use.  Please see Yahoo's terms of use:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here\nHere\nHere","category":"page"},{"location":"#What-you-can-download","page":"Home","title":"What you can download","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Price data (including intraday)\nFundamental data\nOption Data\nESG Data\nquoteSummary data (this is a JSON3.object that contains a multitude of different information)","category":"page"}]
}
