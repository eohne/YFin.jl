var documenterSearchIndex = {"docs":
[{"location":"DataFramesetc/#Converting-To-Tables","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Converting To Tables","text":"","category":"section"},{"location":"DataFramesetc/#DataFrames-(DataFrames.jl)","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"DataFrames (DataFrames.jl)","text":"","category":"section"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"The OrderedDicts can readily be converted to DataFrames by simply calling the DataFrames function on them.","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"using DataFrames\n\nprices = get_prices(\"AAPL\")\n\nDataFrame(prices)","category":"page"},{"location":"DataFramesetc/#TimeArray-from-TimeSeries","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"TimeArray from TimeSeries","text":"","category":"section"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"The TimeArray takes a Vector with the timestamp, a matrix with the price data, column names, and some metadata.  ","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"Below is a simple function showing how one may convert the dictionaries containing the price information into a TimeArray - this is most likely not the fastest or most elegant way.","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"using TimeSeries\n\nprices = get_prices(\"AAPL\")\n\nfunction stock_price_to_time_array(d)\n    coln = collect(keys(x))[3:end] # only get the keys that are not ticker or datetime\n    m = hcat([x[k] for k in coln]...) #Convert the dictionary into a matrix\n    return TimeArray(x[\"timestamp\"],m,Symbol.(coln),x[\"ticker\"])\nend\n\nstock_price_to_time_array(prices)","category":"page"},{"location":"DataFramesetc/#TSFrame-from-TSFrames.jl","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"TSFrame from TSFrames.jl","text":"","category":"section"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"The TSFrame takes a matrix, a DateTime index, and a Vector of column names as arguments.  ","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"Below is an example of a function converting the price data to a TSFrame - this is most likely not the fastest or most elegant way.","category":"page"},{"location":"DataFramesetc/","page":"Convert to DataFrames, TimeArrays, TSFrames","title":"Convert to DataFrames, TimeArrays, TSFrames","text":"using TSFrames\n\nprices = get_prices(\"AAPL\")\n\nfunction stock_price_to_TSFrames(x)\n    coln = collect(keys(x))[3:end] # only get the keys that are not ticker or datetime\n    m = hcat([x[k] for k in coln]...) #Convert the dictionary into a matrix\n    tsf = TSFrame(m,x[\"timestamp\"],colnames = Symbol.(coln)) # create the timeseries array\n    return tsf\nend\n\nstock_price_to_TSFrames(prices)","category":"page"},{"location":"Plotting_Example/#Plotting-Some-Data","page":"Plotting Data with PlotlyJS","title":"Plotting Some Data","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"This section gives some examples on how to create plots for a few data items - quite a lot of data that is available is not covered here.","category":"page"},{"location":"Plotting_Example/#Packages-Used","page":"Plotting Data with PlotlyJS","title":"Packages Used","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"DataFrames.jl for easier data handling\nDates.jl because we need dates ;) \nPlotlyJS.jl for our plots","category":"page"},{"location":"Plotting_Example/#Load-the-packages:","page":"Plotting Data with PlotlyJS","title":"Load the packages:","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"using YFinance\nusing DataFrames\nusing Dates\nusing PlotlyJS","category":"page"},{"location":"Plotting_Example/#Retriev-price-information-for-AAPL","page":"Plotting Data with PlotlyJS","title":"Retriev price information for AAPL","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"Here we use intraday price information.","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"AAPL = get_prices(\"AAPL\",interval = \"1m\",range=\"1d\")","category":"page"},{"location":"Plotting_Example/#OHLC-Plot-(Intraday)","page":"Plotting Data with PlotlyJS","title":"OHLC Plot (Intraday)","text":"","category":"section"},{"location":"Plotting_Example/#Plot-Layout","page":"Plotting Data with PlotlyJS","title":"Plot Layout","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"This is not really needed just styles the plot and adds a rangeslider and rangeselector.","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"# Creates the Layout for our plots (not really needed unless you want to style the plots)\nfunction plot_layout_minute(title=\"\") \n    l =  Layout(\n        title_text = \"<b>$(title)</b>\",\n        paper_bgcolor =:white,\n        plot_bgcolor =:white,\n        yaxis = attr(\n            gridcolor=:lightgrey,\n            griddash=\"dot\",\n            zerolinecolor=:lightgrey),\n        xaxis=attr(\n            gridcolor=:lightgrey,\n            griddash=\"dot\",\n            zerolinecolor=:lightgrey,\n            rangeslider_visible=true,\n            rangeselector=attr(\n                buttons=[\n                    attr(count=5, label=\"5m\", step=\"minute\", stepmode=\"backward\"),\n                    attr(count=10, label=\"10m\", step=\"minute\", stepmode=\"backward\"),\n                    attr(count=15, label=\"15m\", step=\"minute\", stepmode=\"backward\"),\n                    attr(count=30, label=\"30m\", step=\"minute\", stepmode=\"backward\"),\n                    attr(count=1, label=\"1h\", step=\"hour\", stepmode=\"backward\"),\n                    attr(count=2, label=\"2h\", step=\"hour\", stepmode=\"backward\"),\n                    attr(count=5, label=\"5h\", step=\"hour\", stepmode=\"backward\"),\n                    attr(step=\"all\")\n                    ])))\n    return l\nend;\n\n#Dictionary to map column names to strings displayed on the plot (also not needed unless for styling of the plots)\nlabels=Dict(\n        :returns => \"Return\",\n        :log_ret => \"Log Return\",\n        :index => \"Wealth Index\",\n        :timestamp =>\"Date\",\n        :open => \"Open\",\n        :high => \"High\",\n        :low => \"Low\",\n        :close =>\"Close\",\n        :adjclose =>\"Adjusted Close\",\n        :vol =>\"Volume\",\n        :ticker => \"Ticker\");","category":"page"},{"location":"Plotting_Example/#The-Plot:","page":"Plotting Data with PlotlyJS","title":"The Plot:","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"\n# Lets start with a OHLC Plot:\n# creates a OHLC plot \nfunction ohlc_plot(data::OrderedDict)\n    p = Plot(candlestick(\n            x=data[\"timestamp\"],\n            open=data[\"open\"],\n            high=data[\"high\"],\n            low=data[\"low\"],\n            close=data[\"close\"],\n            increasing_line_color=\"turquoise\",\n            decreasing_line_color=\"darkgray\",\n            labels=labels #delete this argument for no styling of the plot\n            ),\n            plot_layout_minute(data[\"ticker\"]) # delete this argument for no styling of the plot\n            )\n    return p \nend;\n\nohlc_plot(AAPL)","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"(Image: OHCL Plot)","category":"page"},{"location":"Plotting_Example/#Plot-Multiple-Items","page":"Plotting Data with PlotlyJS","title":"Plot Multiple Items","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"For illustration I used Apple (AAPL), the S&P500 (^GSPC), and the NASDAQ (^IXIC) for this.","category":"page"},{"location":"Plotting_Example/#Download-Data-and-convert-to-DataFrame","page":"Plotting Data with PlotlyJS","title":"Download Data and convert to DataFrame","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"# Lets get multiple tickers and stack them into a dataframe!\n# Downloads data and stacks it into a dataframe\nfunction get_long_df(symbols::AbstractVector{<:AbstractString},interval,range)\n    p = get_prices.(symbols,interval=interval,range=range);\n    p = vcat([DataFrame(i) for i in values(p)]...);\n    p.timestamp = Date.(p.timestamp);\n    return p\nend;\n\n#Download a Price\nprices =  get_long_df([\"AAPL\",\"^GSPC\", \"^IXIC\"],\"1d\",\"2y\")","category":"page"},{"location":"Plotting_Example/#OHLC-Plot-of-a-specific-ticker","page":"Plotting Data with PlotlyJS","title":"OHLC Plot of a specific ticker","text":"","category":"section"},{"location":"Plotting_Example/#Plot-Layout-2","page":"Plotting Data with PlotlyJS","title":"Plot Layout","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"This is not really needed just styles the plot and adds a rangeslider and rangeselector.","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"# Lets start with a OHLC Plot:\n# creates a OHLC plot for a specific ticker\n\nfunction plot_layout(title=\"\") \n    l =  Layout(\n        title_text = \"<b>$(title)</b>\",\n        paper_bgcolor =:white,\n        plot_bgcolor =:white,\n        yaxis = attr(\n            gridcolor=:lightgrey,\n            griddash=\"dot\",\n            zerolinecolor=:lightgrey),\n        xaxis=attr(\n            gridcolor=:lightgrey,\n            griddash=\"dot\",\n            zerolinecolor=:lightgrey,\n            rangeslider_visible=true,\n            rangeselector=attr(\n                buttons=[\n                    attr(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n                    attr(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n                    attr(count=1, label=\"YTD\", step=\"year\", stepmode=\"todate\"),\n                    attr(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n                    attr(step=\"all\")\n                    ])))\n    return l\nend;","category":"page"},{"location":"Plotting_Example/#The-Plot:-2","page":"Plotting Data with PlotlyJS","title":"The Plot:","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"function ohlc_plot(data::DataFrame,symbol::AbstractString)\n    p = Plot(candlestick(data[isequal.(data.ticker,symbol),:],\n            x=:timestamp,\n            open=:open,\n            high=:high,\n            low=:low,\n            close=:close,\n            increasing_line_color=\"turquoise\",\n            decreasing_line_color=\"darkgray\",labels=labels),\n            plot_layout(symbol) )\n    return p \nend;\n\nohlc_plot(prices,\"AAPL\")","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"(Image: OHCL Plot)","category":"page"},{"location":"Plotting_Example/#Comparsion-Plot-raw-prices","page":"Plotting Data with PlotlyJS","title":"Comparsion Plot - raw prices","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"# Let's compare how the stocks have performed over time:\n# Creates a comparison plot of the price for all items\nfunction comparison_plot(data::DataFrame,column::Symbol=:adjclose)\n    return Plot(data, x=:timestamp,y=column,group=:ticker,labels=labels,\n    plot_layout(labels[column]))\nend;\ncomparison_plot(prices)","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"(Image: Raw Comp)","category":"page"},{"location":"Plotting_Example/#Comparison-Plot-Wealth-Index","page":"Plotting Data with PlotlyJS","title":"Comparison Plot - Wealth Index","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"For better comparison we first calculate returns and afterwards a wealth index then plot that.","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"\n# Calculate Return\nfunction get_return(x::AbstractVector{<:Number})\n    res = x[2:end]./x[1:(end-1)]\n    return vcat(missing,res.-1)\nend;\n\n# Calculate Wealth Index\nfunction wealthIndex(x::AbstractVector,base=100)\n    res = vcat(1,x[2:end])\n    res = log.(res.+1)\n    res = exp.(cumsum(res)) .- 1\n    return res.*base\nend;\n\n# groupby ticker and calculate returns and the wealth index\ntransform!(groupby(prices,:ticker),\n    :adjclose => get_return => :ret)\ntransform!(groupby(prices,:ticker),\n    :ret => wealthIndex => :index)\n\n# Now lets plot the price index instead of the adjclose \ncomparison_plot(prices,:index)","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"(Image: Wealth Index Comp)","category":"page"},{"location":"Plotting_Example/#ESG-Data-Bar-Chart","page":"Plotting Data with PlotlyJS","title":"ESG Data Bar Chart","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"Bar Chart comparing ESG scores between AAPL and its peers","category":"page"},{"location":"Plotting_Example/#Download-ESG-Data","page":"Plotting Data with PlotlyJS","title":"Download ESG Data","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"Download ESG data and convert to a DataFrame and reshape to long format for easier plotting","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"esg = get_ESG(\"AAPL\")\nesg = vcat([DataFrame(i) for i in values(esg)]...) #convert to DataFrame\nsubset!(esg, :timestamp => x -> isequal.(x,maximum(x))) # take only the newest values\nesg = DataFrames.stack(esg,[:esgScore,:environmentScore,:governanceScore,:socialScore]) #reshape into long format","category":"page"},{"location":"Plotting_Example/#Plotting:","page":"Plotting Data with PlotlyJS","title":"Plotting:","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"function create_barplot()\n    esg[!,\"colors\"]= ifelse.(isequal.(esg.symbol,\"AAPL\"),\"darkorange\",\"steelblue\")\n\n    traces = bar(esg,x = :variable, y = :value,group=:symbol,names=:symbol,marker_color=:colors)\n\n    layout = Layout(barmode=\"group\",\n        legend=attr(\n            x=1,\n            y=1.02,\n            yanchor=\"bottom\",\n            xanchor=\"right\",\n            orientation=\"h\"),\n            paper_bgcolor =:white,\n            plot_bgcolor =:white\n            )\n    return Plot(traces, layout)\nend\ncreate_barplot()","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"(Image: ESG Bar Chart)","category":"page"},{"location":"Plotting_Example/#Pie-Chart-of-the-major-Holders","page":"Plotting Data with PlotlyJS","title":"Pie Chart of the major Holders","text":"","category":"section"},{"location":"Plotting_Example/#Downloading-the-Data","page":"Plotting Data with PlotlyJS","title":"Downloading the Data","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"major_holders  = get_major_holders_breakdown(\"AAPL\")","category":"page"},{"location":"Plotting_Example/#Creating-the-Pie-Chart","page":"Plotting Data with PlotlyJS","title":"Creating the Pie Chart","text":"","category":"section"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"function create_pie() \n    colors = [\"darkorange\",\"steelblue\",\"teal\"] # Set Colors\n    rest = (1-major_holders[\"insidersPercentHeld\"] - major_holders[\"institutionsPercentHeld\"])\n    values = [major_holders[\"insidersPercentHeld\"], major_holders[\"institutionsPercentHeld\"],rest].*100\n    plot(\n        pie(values = values,\n        labels = [\"Insiders\",\"Institutions\",\"Rest\"],\n        marker_colors = colors),\n        Layout(title_text = \"<b>Major Holders</b>\"))\nend;\ncreate_pie()","category":"page"},{"location":"Plotting_Example/","page":"Plotting Data with PlotlyJS","title":"Plotting Data with PlotlyJS","text":"(Image: Major Holders Pie Chart)","category":"page"},{"location":"Options/#Download-Options-Data","page":"Options","title":"Download Options Data","text":"","category":"section"},{"location":"Options/","page":"Options","title":"Options","text":"get_Options","category":"page"},{"location":"Options/#YFinance.get_Options","page":"Options","title":"YFinance.get_Options","text":"get_Options(symbol::String)\n\nRetrievs options data from Yahoo Finance stored in a OrderedCollections.OrderedDict with two items. One contains Call options the other Put options. These subitems are OrderedCollections.OrderedDict themselves. The call and put options OrderedCollections.OrderedDict can readily be transformed to a DataFrame.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\n\nExamples\n\njulia> get_Options(\"AAPL\")\nOrderedDict{String, OrderedDict{String, Vector{Any}}} with 2 entries:\n  \"calls\" => OrderedDict(\"contractSymbol\"=>[\"AAPL221230C00050000\", \"AAPL221230C00055000\",…\n  \"puts\"  => OrderedDict(\"contractSymbol\"=>[\"AAPL221230P00050000\", \"AAPL221230P00055000\",…\n\njulia> using DataFrames\njulia> get_Options(\"AAPL\")[\"calls\"] |> DataFrame\n72×16 DataFrame\n Row │ contractSymbol       strike  currency  lastPrice  change  percentChange  volume   ⋯\n     │ Any                  Any     Any       Any        Any     Any            Any      ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL221230C00050000  50      USD       79.85      0       0              1        ⋯\n   2 │ AAPL221230C00055000  55      USD       72.85      0       0              1\n   3 │ AAPL221230C00060000  60      USD       66.4       0       0              19        \n  ⋮  │          ⋮             ⋮        ⋮          ⋮        ⋮           ⋮           ⋮     ⋱\n  71 │ AAPL221230C00230000  230     USD       0.02       0       0              missing   \n  72 │ AAPL221230C00250000  250     USD       0.01       0       0              2        ⋯\n                                                             9 columns and 67 rows omitted\n\njulia> using DataFrames\njulia> data  = get_Options(\"AAPL\");\njulia> vcat( [DataFrame(i) for i in values(data)]...)\n141×16 DataFrame\n Row │ contractSymbol       strike  currency  lastPrice  change  percentChange  volume   ⋯\n     │ Any                  Any     Any       Any        Any     Any            Any      ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL221230C00050000  50      USD       79.85      0       0              1        ⋯\n   2 │ AAPL221230C00055000  55      USD       72.85      0       0              1\n   3 │ AAPL221230C00060000  60      USD       66.4       0       0              19        \n  ⋮  │          ⋮             ⋮        ⋮          ⋮        ⋮           ⋮          ⋮      ⋱\n 140 │ AAPL221230P00225000  225     USD       94.65      0       0              1\n 141 │ AAPL221230P00230000  230     USD       99.65      0       0              1        ⋯\n                                                            9 columns and 136 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"Search Symbols/#Search-for-Yahoo-Finance-Symbols","page":"Search for Symbol","title":"Search for Yahoo Finance Symbols","text":"","category":"section"},{"location":"Search Symbols/","page":"Search for Symbol","title":"Search for Symbol","text":"This package currently provides two ways to get tickers.","category":"page"},{"location":"Search Symbols/","page":"Search for Symbol","title":"Search for Symbol","text":"you know the company/security name but are unsure about the ticker use get_symbols()\nyou simply want all tickers listed on the NASDAQ, AMEX, or NYSE use get_all_symbols()","category":"page"},{"location":"Search Symbols/","page":"Search for Symbol","title":"Search for Symbol","text":"get_symbols\nget_all_symbols","category":"page"},{"location":"Search Symbols/#YFinance.get_symbols","page":"Search for Symbol","title":"YFinance.get_symbols","text":"get_symbols(search_term::String)\n\nAllows searches for specific securities.\n\nArguments\n\nsearch_term::String: Typically a company/security name (e.g. microsoft)\n\nReturns\n\nJSON3.Array{JSON3.Object}: Each array element is a JSON3.Object search results contiangint the following keys:\nexchange, shortname, quoteType, symbol, index, score, typeDisp, longname, exchDisp, isYahooFinance\nIf no match was found an empty JSON3.Array is returned.\n\nExample\n\njulia> get_symbols(\"micro\")\n7-element JSON3.Array{JSON3.Object, Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}}:\n {\n         \"exchange\": \"CMX\",\n        \"shortname\": \"Micro Gold Futures,Jun-2023\",\n        \"quoteType\": \"FUTURE\",\n           \"symbol\": \"MGC=F\",\n            \"index\": \"quotes\",\n            \"score\": 3179100,\n         \"typeDisp\": \"Future\",\n         \"exchDisp\": \"New York Commodity Exchange\",\n   \"isYahooFinance\": true\n}\n {\n         \"exchange\": \"NMS\",\n        \"shortname\": \"Microsoft Corporation\",\n        \"quoteType\": \"EQUITY\",\n           \"symbol\": \"MSFT\",\n            \"index\": \"quotes\",\n            \"score\": 274384,\n         \"typeDisp\": \"Equity\",\n         \"longname\": \"Microsoft Corporation\",\n         \"exchDisp\": \"NASDAQ\",\n           \"sector\": \"Technology\",\n         \"industry\": \"Software—Infrastructure\",\n   \"isYahooFinance\": true\n}\n {\n         \"exchange\": \"NMS\",\n        \"shortname\": \"Micron Technology, Inc.\",\n        \"quoteType\": \"EQUITY\",\n           \"symbol\": \"MU\",\n            \"index\": \"quotes\",\n            \"score\": 265579,\n         \"typeDisp\": \"Equity\",\n         \"longname\": \"Micron Technology, Inc.\",\n         \"exchDisp\": \"NASDAQ\",\n           \"sector\": \"Technology\",\n         \"industry\": \"Semiconductors\",\n   \"isYahooFinance\": true\n}\n {\n         \"exchange\": \"NMS\",\n        \"shortname\": \"Advanced Micro Devices, Inc.\",\n        \"quoteType\": \"EQUITY\",\n           \"symbol\": \"AMD\",\n            \"index\": \"quotes\",\n            \"score\": 252946,\n         \"typeDisp\": \"Equity\",\n         \"longname\": \"Advanced Micro Devices, Inc.\",\n         \"exchDisp\": \"NASDAQ\",\n           \"sector\": \"Technology\",\n         \"industry\": \"Semiconductors\",\n   \"isYahooFinance\": true\n}\n {\n         \"exchange\": \"NMS\",\n        \"shortname\": \"MicroStrategy Incorporated\",\n        \"quoteType\": \"EQUITY\",\n           \"symbol\": \"MSTR\",\n            \"index\": \"quotes\",\n            \"score\": 52264,\n         \"typeDisp\": \"Equity\",\n         \"longname\": \"MicroStrategy Incorporated\",\n         \"exchDisp\": \"NASDAQ\",\n           \"sector\": \"Technology\",\n         \"industry\": \"Software—Application\",\n   \"isYahooFinance\": true\n}\n {\n         \"exchange\": \"NMS\",\n        \"shortname\": \"Super Micro Computer, Inc.\",\n        \"quoteType\": \"EQUITY\",\n           \"symbol\": \"SMCI\",\n            \"index\": \"quotes\",\n            \"score\": 38924,\n         \"typeDisp\": \"Equity\",\n         \"longname\": \"Super Micro Computer, Inc.\",\n         \"exchDisp\": \"NASDAQ\",\n           \"sector\": \"Technology\",\n         \"industry\": \"Computer Hardware\",\n   \"isYahooFinance\": true\n}\n {\n         \"exchange\": \"PCX\",\n        \"shortname\": \"MicroSectors FANG  Index 3X Lev\",\n        \"quoteType\": \"ETF\",\n           \"symbol\": \"FNGU\",\n            \"index\": \"quotes\",\n            \"score\": 33432,\n         \"typeDisp\": \"ETF\",\n         \"longname\": \"MicroSectors FANG+ Index 3X Leveraged ETN\",\n         \"exchDisp\": \"NYSEArca\",\n   \"isYahooFinance\": true\n}\n\n\n\n\n\n","category":"function"},{"location":"Search Symbols/#YFinance.get_all_symbols","page":"Search for Symbol","title":"YFinance.get_all_symbols","text":"get_all_symbols(market::T)::Vector{T} where {T<:String}\n\nFetch all the symbols from a given market.\n\nArguments\n\nmarket::String: The market to fetch the symbols from.\n\nCurrently supported markets are:\n\nAMEX\nNASDAQ\nNYSE  \n\nUses dumbstockapi.com\n\nReturns\n\nVector{String}: A vector of strings containing the symbols.\n\nExample\n\njulia> get_all_symbols(\"NYSE\")\n3127-element Vector{String}:\n \"A\"\n \"AA\"\n \"AAC\"\n \"AAN\"\n ⋮\n \"ZTR\"\n \"ZTS\"\n \"ZUO\"\n \"ZYME\"\n\n\n\n\n\n","category":"function"},{"location":"ESG/#Download-ESG-Data","page":"ESG","title":"Download ESG Data","text":"","category":"section"},{"location":"ESG/","page":"ESG","title":"ESG","text":"get_ESG","category":"page"},{"location":"ESG/#YFinance.get_ESG","page":"ESG","title":"YFinance.get_ESG","text":"get_ESG(symbol::String)\n\nRetrievs ESG Scores from Yahoo Finance stored in a OrderedCollections.OrderedDict with two items. One, score, contains the companies ESG scores and individal Overall, Environment, Social and  Goverance Scores as well as a timestamp of type DateTime. The other,  peer_score, contains the peer group's scores. The subdictionaries can be transformed to DataFrames\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\n\nExamples\n\njulia> get_ESG(\"AAPL\")\nOrderedDict{String, OrderedDict{String, Any}} with 2 entries:\n  \"score\"      => OrderedDict(\"symbol\"=>\"AAPL\", \"timestamp\"=>[DateTime(\"2014-09-01T00:00:…\n  \"peer_score\" => OrderedDict(\"symbol\"=>\"Technology Hardware\", \"timestamp\"=>[DateTime(\"20…\n\njulia> using DataFrames\njulia> get_ESG(\"AAPL\")[\"score\"] |> DataFrame\n96×6 DataFrame\n Row │ symbol  timestamp            esgScore    governanceScore  environmentScore  socialScore \n     │ String  DateTime             Real?       Real?            Real?             Real?       \n─────┼─────────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2014-09-01T00:00:00       61               62                74           45\n   2 │ AAPL    2014-10-01T00:00:00       60               62                74           45\n   3 │ AAPL    2014-11-01T00:00:00       61               62                74           45\n  ⋮  │   ⋮              ⋮               ⋮              ⋮                ⋮               ⋮\n  95 │ AAPL    2022-07-01T00:00:00  missing          missing           missing      missing    \n  96 │ AAPL    2022-08-01T00:00:00       16.68             9.18              0.65         6.86\n                                                                                91 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"Prices/#Download-Price-Data","page":"Prices","title":"Download Price Data","text":"","category":"section"},{"location":"Prices/","page":"Prices","title":"Prices","text":"This function returns open, high, low, close, and adjusted close prices as well as volume.  ","category":"page"},{"location":"Prices/","page":"Prices","title":"Prices","text":"For a few stocks yahoo finance will return nothing for specific timestamps in the price series.  ","category":"page"},{"location":"Prices/","page":"Prices","title":"Prices","text":"For performance reasons and easier integration with TimeSeries.jl these nothing values are returned as NaNs. Some other packages like python's yahooquery do not return these datapoints at all. We decided to return them to indicate a break in the series and to indicate that Yahoo Finance thinks it should have price information for the specific timestamp but does not have any.   ","category":"page"},{"location":"Prices/","page":"Prices","title":"Prices","text":"get_prices","category":"page"},{"location":"Prices/#YFinance.get_prices","page":"Prices","title":"YFinance.get_prices","text":"get_prices(symbol::AbstractString; range::AbstractString=\"1mo\", interval::AbstractString=\"1d\",startdt=\"\", enddt=\"\",prepost=false,autoadjust=true,timeout = 10,throw_error=false,exchange_local_time=false)\n\nRetrievs prices from Yahoo Finance.\n\nArguments\n\nSmybol is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)\n\nYou can either provide a range or a startdt and an enddt.\n\nrange takes the following values: \"1d\",\"5d\",\"1mo\",\"3mo\",\"6mo\",\"1y\",\"2y\",\"5y\",\"10y\",\"ytd\",\"max\". Note: when range is selected rather than startdt or enddt the specified interval may not be observed by Yahoo! Therefore, it is recommended to use startdt and enddt instead. To get max simply set startdt = \"1900-01-01\"\nstartdt and enddt take the following types: ::Date,::DateTime, or a String of the following form yyyy-mm-dd\nprepost is a boolean indicating whether pre and post periods should be included. Defaults to false\nautoadjust defaults to true. It adjusts open, high, low, close prices, and volume by multiplying by the ratio between the close and the adjusted close prices - only available for intervals of 1d and up. \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\nexchange_local _time::Bool defaults to false. If set to true the timestamp corresponds to the exchange local time else to GMT.\n\nExamples\n\njulia> get_prices(\"AAPL\",range=\"1d\",interval=\"90m\")\nOrderedDict{String, Any} with 7 entries:\n  \"ticker\"    => \"AAPL\"\n  \"timestamp\" => [DateTime(\"2022-12-29T14:30:00\"), DateTime(\"2022-12-29T16:00:00\"), DateTime(\"2022-12-29T17:30:00\"), DateTime(\"2022-12-29T19:00:00\"), DateTime(\"2022-12-29T20:30:00\"), DateTime(\"2022-12-29T21:00:00\")]   \n  \"open\"      => [127.99, 129.96, 129.992, 130.035, 129.95, 129.61]\n  \"high\"      => [129.98, 130.481, 130.098, 130.24, 130.22, 129.61]\n  \"low\"       => [127.73, 129.44, 129.325, 129.7, 129.56, 129.61]\n  \"close\"     => [129.954, 129.998, 130.035, 129.95, 129.6, 129.61]\n  \"vol\"       => [29101646, 14058713, 9897737, 9552323, 6308537, 0]\n\nCan be easily converted to a DataFrame\n\njulia> using DataFrames\njulia> get_prices(\"AAPL\",range=\"1d\",interval=\"90m\") |> DataFrame\n6×7 DataFrame\n Row │ ticker  timestamp            open     high     low      close    vol      \n     │ String  DateTime             Float64  Float64  Float64  Float64  Int64    \n─────┼───────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2022-12-29T14:30:00  127.99   129.98   127.73   129.954  29101646 \n   2 │ AAPL    2022-12-29T16:00:00  129.96   130.481  129.44   129.998  14058713 \n   3 │ AAPL    2022-12-29T17:30:00  129.992  130.098  129.325  130.035   9897737 \n   4 │ AAPL    2022-12-29T19:00:00  130.035  130.24   129.7    129.95    9552323 \n   5 │ AAPL    2022-12-29T20:30:00  129.95   130.22   129.56   129.6     6308537 \n   6 │ AAPL    2022-12-29T21:00:00  129.61   129.61   129.61   129.61          0 \n\nBroadcasting\n\njulia> get_prices.([\"AAPL\",\"NFLX\"],range=\"1d\",interval=\"90m\")\nOrderedDict(\"ticker\" => \"AAPL\",\n    \"timestamp\" => [DateTime(\"2022-12-29T14:30:00\"), DateTime(\"2022-12-29T16:00:00\"), DateTime(\"2022-12-29T17:30:00\"), DateTime(\"2022-12-29T19:00:00\"), DateTime(\"2022-12-29T20:30:00\"), DateTime(\"2022-12-29T21:00:00\")], \n    \"open\" => [127.98999786376953, 129.9600067138672, 129.99240112304688, 130.03500366210938, 129.9499969482422, 129.61000061035156], \n    \"high\" => [129.97999572753906, 130.4813995361328, 130.09829711914062, 130.24000549316406, 130.22000122070312, 129.61000061035156], \n    \"low\" => [127.7300033569336, 129.44000244140625, 129.3249969482422, 129.6999969482422, 129.55999755859375, 129.61000061035156], \n    \"close\" => [129.95419311523438, 129.99830627441406, 130.03500366210938, 129.9499969482422, 129.60000610351562, 129.61000061035156], \n    \"vol\" => [29101646, 14058713, 9897737, 9552323, 6308537, 0])\nOrderedDict(\"ticker\" => \"NFLX\",\n    \"timestamp\" => [DateTime(\"2022-12-29T14:30:00\"), DateTime(\"2022-12-29T16:00:00\"), DateTime(\"2022-12-29T17:30:00\"), DateTime(\"2022-12-29T19:00:00\"), DateTime(\"2022-12-29T20:30:00\"), DateTime(\"2022-12-29T21:00:00\")],\n    \"open\" => [283.17999267578125, 289.5199890136719, 293.4200134277344, 290.05499267578125, 290.760009765625, 291.1199951171875],\n    \"high\" => [291.8699951171875, 295.4999084472656, 293.5, 291.32000732421875, 292.3299865722656, 291.1199951171875],\n    \"low\" => [281.010009765625, 289.489990234375, 289.5400085449219, 288.7699890136719, 290.5400085449219, 291.1199951171875],\n    \"close\" => [289.5199890136719, 293.46990966796875, 290.04998779296875, 290.82000732421875, 291.1199951171875, 291.1199951171875],\n    \"vol\" => [2950791, 2458057, 1362915, 1212217, 1121821, 0]) \n\nConverting it to a DataFrame:\n\njulia> using DataFrames\njulia> data = get_prices.([\"AAPL\",\"NFLX\"],range=\"1d\",interval=\"90m\");\njulia> vcat([DataFrame(i) for i in data]...)\n12×7 DataFrame\n Row │ ticker  timestamp            open     high     low      close    vol      \n     │ String  DateTime             Float64  Float64  Float64  Float64  Int64    \n─────┼───────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2022-12-29T14:30:00  127.99   129.98   127.73   129.954  29101646\n   2 │ AAPL    2022-12-29T16:00:00  129.96   130.481  129.44   129.998  14058713\n   3 │ AAPL    2022-12-29T17:30:00  129.992  130.098  129.325  130.035   9897737\n   4 │ AAPL    2022-12-29T19:00:00  130.035  130.24   129.7    129.95    9552323\n   5 │ AAPL    2022-12-29T20:30:00  129.95   130.22   129.56   129.6     6308537\n   6 │ AAPL    2022-12-29T21:00:00  129.61   129.61   129.61   129.61          0\n   7 │ NFLX    2022-12-29T14:30:00  283.18   291.87   281.01   289.52    2950791\n   8 │ NFLX    2022-12-29T16:00:00  289.52   295.5    289.49   293.47    2458057\n   9 │ NFLX    2022-12-29T17:30:00  293.42   293.5    289.54   290.05    1362915\n  10 │ NFLX    2022-12-29T19:00:00  290.055  291.32   288.77   290.82    1212217\n  11 │ NFLX    2022-12-29T20:30:00  290.76   292.33   290.54   291.12    1121821\n  12 │ NFLX    2022-12-29T21:00:00  291.12   291.12   291.12   291.12          0\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Download-Quote-Summary-Data","page":"QuoteSummary","title":"Download Quote Summary Data","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"The quote summary item contains tons of different kinds of information. Not all information is available for all tickers. The get_quoteSummary function returns all items available for the ticker.","category":"page"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_quoteSummary","category":"page"},{"location":"QuoteSummary/#YFinance.get_quoteSummary","page":"QuoteSummary","title":"YFinance.get_quoteSummary","text":"get_quoteSummary(symbol::String; item=nothing)\n\nRetrievs general information from Yahoo Finance stored in a JSON3 object.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nitem can either be a string or multiple items as a Vector of Strings. To see valid items call _QuoteSummary_Items (not all items are available for all types of securities)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty JSON3.Object is returned.\n\nExamples\n\njulia> get_quoteSummary(\"AAPL\")\n\nJSON3.Object{Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 31 entries:\n:assetProfile             => {…\n:recommendationTrend      => {…\n:cashflowStatementHistory => {…\n\n⋮                         => ⋮\njulia> get_quoteSummary(\"AAPL\",item = \"quoteType\")\nJSON3.Object{Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 13 entries:\n:exchange               => \"NMS\"\n:quoteType              => \"EQUITY\"\n:symbol                 => \"AAPL\"\n⋮                       => ⋮\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Sub-Items","page":"QuoteSummary","title":"Sub-Items","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"The below functions can extract certain items from the Yahoo quoteSummary. The functions below return OrderedDictionaries form the OrderCollections.jl package that can readily be piped into a DataFrame.","category":"page"},{"location":"QuoteSummary/#Calendar-Events","page":"QuoteSummary","title":"Calendar Events","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_calendar_events","category":"page"},{"location":"QuoteSummary/#YFinance.get_calendar_events","page":"QuoteSummary","title":"YFinance.get_calendar_events","text":"get_calendar_events(quoteSummary::JSON3.Object)\n\nRetrievs calendar events from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_calendar_events\nOrderedDict{String, Any} with 3 entries:\n  \"dividend_date\"   => DateTime(\"2022-11-10T00:00:00\")\n  \"earnings_dates\"  => [DateTime(\"2023-01-25T10:59:00\"), DateTime(\"2023-01-30T12:00:00\")]\n  \"exdividend_date\" => DateTime(\"2022-11-04T00:00:00\")\n\njulia> get_calendar_events(\"AAPL\")\nOrderedDict{String, Any} with 3 entries:\n  \"dividend_date\"   => DateTime(\"2022-11-10T00:00:00\")\n  \"earnings_dates\"  => [DateTime(\"2023-01-25T10:59:00\"), DateTime(\"2023-01-30T12:00:00\")]\n  \"exdividend_date\" => DateTime(\"2022-11-04T00:00:00\")\n\njulia> using DataFrames\njulia> get_calendar_events(\"AAPL\") |> DataFrame\n2×3 DataFrame\n Row │ dividend_date        earnings_dates       exdividend_date     \n     │ DateTime             DateTime             DateTime\n─────┼───────────────────────────────────────────────────────────────\n   1 │ 2022-11-10T00:00:00  2023-01-25T10:59:00  2022-11-04T00:00:00\n   2 │ 2022-11-10T00:00:00  2023-01-30T12:00:00  2022-11-04T00:00:00\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Earnings-Estimates","page":"QuoteSummary","title":"Earnings Estimates","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_earnings_estimates","category":"page"},{"location":"QuoteSummary/#YFinance.get_earnings_estimates","page":"QuoteSummary","title":"YFinance.get_earnings_estimates","text":"get_earnings_estimates(quoteSummary::JSON3.Object)\n\nRetrievs the earnings estimates from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_earnings_estimates\nOrderedDict{String, Vector} with 3 entries:\n  \"quarter\"  => [\"4Q2021\", \"1Q2022\", \"2Q2022\", \"3Q2022\", \"4Q2022\"]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27, 1.98]\n  \"actual\"   => Union{Missing, Float64}[2.1, 1.52, 1.2, 1.29, missing]\n\njulia> get_earnings_estimates(\"AAPL\")\nOrderedDict{String, Vector} with 3 entries:\n  \"quarter\"  => [\"4Q2021\", \"1Q2022\", \"2Q2022\", \"3Q2022\", \"4Q2022\"]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27, 1.98]\n  \"actual\"   => Union{Missing, Float64}[2.1, 1.52, 1.2, 1.29, missing]\n\njulia> using DataFrames\njulia> get_earnings_estimates(\"AAPL\") |> DataFrame\n5×3 DataFrame\n Row │ quarter  estimate  actual     \n     │ String   Float64   Float64?   \n─────┼───────────────────────────────\n   1 │ 4Q2021       1.89        2.1\n   2 │ 1Q2022       1.43        1.52\n   3 │ 2Q2022       1.16        1.2\n   4 │ 3Q2022       1.27        1.29\n   5 │ 4Q2022       1.98  missing   \n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Earnings-Per-Share-(EPS)","page":"QuoteSummary","title":"Earnings Per Share (EPS)","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_eps","category":"page"},{"location":"QuoteSummary/#YFinance.get_eps","page":"QuoteSummary","title":"YFinance.get_eps","text":"get_eps(quoteSummary::JSON3.Object)\n\nRetrievs the earnings per share from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_eps\nOrderedDict{String, Vector} with 4 entries:\n  \"quarter\"  => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-03-31T00:00:00\"), DateTime(\"2022-06-30T00:00:00\"), DateTime(\"2022-09-30T00:00:00\")]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27]\n  \"actual\"   => [2.1, 1.52, 1.2, 1.29]\n  \"surprise\" => [0.111, 0.063, 0.034, 0.016]\n\njulia> get_eps(\"AAPL\")\nOrderedDict{String, Vector} with 4 entries:\n  \"quarter\"  => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-03-31T00:00:00\"), DateTime(\"2022-06-30T00:00:00\"), DateTime(\"2022-09-30T00:00:00\")]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27]\n  \"actual\"   => [2.1, 1.52, 1.2, 1.29]\n  \"surprise\" => [0.111, 0.063, 0.034, 0.016]\n\njulia> using DataFrames\njulia> get_eps(\"AAPL\") |> DataFrame\n4×4 DataFrame\n Row │ quarter              estimate  actual   surprise \n     │ DateTime             Float64   Float64  Float64  \n─────┼──────────────────────────────────────────────────\n   1 │ 2021-12-31T00:00:00      1.89     2.1      0.111\n   2 │ 2022-03-31T00:00:00      1.43     1.52     0.063\n   3 │ 2022-06-30T00:00:00      1.16     1.2      0.034\n   4 │ 2022-09-30T00:00:00      1.27     1.29     0.016\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Insider-Holdings","page":"QuoteSummary","title":"Insider Holdings","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_insider_holders","category":"page"},{"location":"QuoteSummary/#YFinance.get_insider_holders","page":"QuoteSummary","title":"YFinance.get_insider_holders","text":"get_insider_holders(quoteSummary::JSON3.Object)\n\nRetrievs the insiders holdings from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_insider_holders\nOrderedDict{String, Vector} with 8 entries:\n    \"name\"                 => [\"ADAMS KATHERINE L\", \"BELL JAMES A\", \"JUNG ANDREA\", \"KONDO C…\n    \"relation\"             => Union{Missing, String}[\"General Counsel\", \"Director\", \"Direct…  \n    \"description\"          => Union{Missing, String}[\"Sale\", \"Stock Gift\", \"Conversion of E…  \n    \"lastestTransDate\"     => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionDirect\"       => Union{Missing, Int64}[427334, 34990, 139594, 31505, 4588720, …  \n    \"positionDirectDate\"   => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionIndirect\"     => Union{Missing, Int64}[missing, missing, missing, missing, mis…  \n    \"positionIndirectDate\" => Union{Missing, DateTime}[missing, missing, missing, missing, …\n\njulia> get_insider_holders(\"AAPL\")\nOrderedDict{String, Vector} with 8 entries:\n    \"name\"                 => [\"ADAMS KATHERINE L\", \"BELL JAMES A\", \"JUNG ANDREA\", \"KONDO C…\n    \"relation\"             => Union{Missing, String}[\"General Counsel\", \"Director\", \"Direct…  \n    \"description\"          => Union{Missing, String}[\"Sale\", \"Stock Gift\", \"Conversion of E…  \n    \"lastestTransDate\"     => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionDirect\"       => Union{Missing, Int64}[427334, 34990, 139594, 31505, 4588720, …  \n    \"positionDirectDate\"   => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionIndirect\"     => Union{Missing, Int64}[missing, missing, missing, missing, mis…  \n    \"positionIndirectDate\" => Union{Missing, DateTime}[missing, missing, missing, missing, …\n\n\njulia> using DataFrames\njulia> get_insider_holders(\"AAPL\") |> DataFrame\n10×8 DataFrame\n Row │ name                relation                 description                        l ⋯\n     │ String              String?                  String?                            D ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ ADAMS KATHERINE L   General Counsel          Sale                               2 ⋯\n   2 │ BELL JAMES A        Director                 Stock Gift                         2  \n   3 │ JUNG ANDREA         Director                 Conversion of Exercise of deriva…  2  \n   4 │ KONDO CHRISTOPHER   Officer                  Sale                               2  \n   5 │ LEVINSON ARTHUR D   Director                 Sale                               2 ⋯\n   6 │ MAESTRI LUCA        Chief Financial Officer  Sale                               2  \n   7 │ O'BRIEN DEIRDRE     Officer                  Sale                               2  \n   8 │ SUGAR RONALD D      Director                 Conversion of Exercise of deriva…  2  \n   9 │ WAGNER SUSAN L      Director                 Conversion of Exercise of deriva…  2 ⋯\n  10 │ WILLIAMS JEFFREY E  Chief Operating Officer  Conversion of Exercise of deriva…  2  \n                                                                         5 columns omitted\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Insider-Transactions","page":"QuoteSummary","title":"Insider Transactions","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_insider_transactions","category":"page"},{"location":"QuoteSummary/#YFinance.get_insider_transactions","page":"QuoteSummary","title":"YFinance.get_insider_transactions","text":"get_insider_transactions(quoteSummary::JSON3.Object)\n\nRetrievs the insider transactions from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_insider_transactions\nOrderedDict{String, Vector} with 7 entries:\n  \"filerName\"       => [\"KONDO CHRISTOPHER\", \"MAESTRI LUCA\", \"O'BRIEN DEIRDRE\", \"KONDO CH…  \n  \"filerRelation\"   => Union{Missing, String}[\"Officer\", \"Chief Financial Officer\", \"Offi…  \n  \"transactionText\" => Union{Missing, String}[\"Sale at price 148.72 per share.\", \"Sale at…  \n  \"date\"            => Union{Missing, DateTime}[DateTime(\"2022-11-22T00:00:00\"), DateTime…  \n  \"ownership\"       => Union{Missing, String}[\"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"I\"…  \n  \"shares\"          => Union{Missing, Int64}[20200, 176299, 8053, 13136, 16612, 181139, 1…  \n  \"value\"           => Union{Missing, Int64}[3004144, 27493275, 1147150, missing, missing…\n\njulia> get_insider_transactions(\"AAPL\")\nOrderedDict{String, Vector} with 7 entries:\n  \"filerName\"       => [\"KONDO CHRISTOPHER\", \"MAESTRI LUCA\", \"O'BRIEN DEIRDRE\", \"KONDO CH…  \n  \"filerRelation\"   => Union{Missing, String}[\"Officer\", \"Chief Financial Officer\", \"Offi…  \n  \"transactionText\" => Union{Missing, String}[\"Sale at price 148.72 per share.\", \"Sale at…  \n  \"date\"            => Union{Missing, DateTime}[DateTime(\"2022-11-22T00:00:00\"), DateTime…  \n  \"ownership\"       => Union{Missing, String}[\"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"I\"…  \n  \"shares\"          => Union{Missing, Int64}[20200, 176299, 8053, 13136, 16612, 181139, 1…  \n  \"value\"           => Union{Missing, Int64}[3004144, 27493275, 1147150, missing, missing…\n\njulia> using DataFrames\njulia> get_insider_transactions(\"AAPL\") |> DataFrame\n75×7 DataFrame\n Row │ filerName           filerRelation            transactionText                    d ⋯\n     │ String              String?                  String?                            D ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ KONDO CHRISTOPHER   Officer                  Sale at price 148.72 per share.    2 ⋯\n   2 │ MAESTRI LUCA        Chief Financial Officer  Sale at price 154.70 - 157.20 pe…  2  \n   3 │ O'BRIEN DEIRDRE     Officer                  Sale at price 142.45 per share.    2  \n   4 │ KONDO CHRISTOPHER   Officer                                                     2  \n   5 │ O'BRIEN DEIRDRE     Officer                                                     2 ⋯   \n   6 │ ADAMS KATHERINE L   General Counsel          Sale at price 138.44 - 142.93 pe…  2  \n   7 │ O'BRIEN DEIRDRE     Officer                  Sale at price 141.09 - 142.83 pe…  2  \n  ⋮  │         ⋮                      ⋮                             ⋮                    ⋱\n  70 │ WAGNER SUSAN L      Director                                                    2  \n  71 │ JUNG ANDREA         Director                                                    2 ⋯\n  72 │ BELL JAMES A        Director                                                    2  \n  73 │ LOZANO MONICA C.    Director                                                    2  \n  74 │ GORE ALBERT A JR    Director                                                    2  \n  75 │ ADAMS KATHERINE L   General Counsel          Sale at price 131.79 - 134.56 pe…  2 ⋯\n                                                             4 columns and 62 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Institutional-Ownership","page":"QuoteSummary","title":"Institutional Ownership","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_institutional_ownership","category":"page"},{"location":"QuoteSummary/#YFinance.get_institutional_ownership","page":"QuoteSummary","title":"YFinance.get_institutional_ownership","text":"get_institutional_ownership(quoteSummary::JSON3.Object)\n\nRetrievs the institutional ownership from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_institutional_ownership\nOrderedDict{String, Vector} with 6 entries:\n  \"organization\" => [\"Vanguard Group, Inc. (The)\", \"Blackrock Inc.\", \"Berkshire Hathaway,…  \n  \"reportDate\"   => Union{Missing, DateTime}[DateTime(\"2022-09-30T00:00:00\"), DateTime(\"2…  \n  \"pctHeld\"      => Union{Missing, Float64}[0.08, 0.0641, 0.0562, 0.0372, 0.0221, 0.0176,…  \n  \"position\"     => Union{Missing, Int64}[1272378901, 1020245185, 894802319, 591543874, 3…  \n  \"value\"        => Union{Missing, Int64}[164913030135, 132233979050, 115975329111, 76670…  \n  \"pctChange\"    => Union{Missing, Float64}[-0.0039, -0.0082, 0.0, -0.0111, 0.0191, 0.005…\n\njulia> get_institutional_ownership(\"AAPL\")\nOrderedDict{String, Vector} with 6 entries:\n  \"organization\" => [\"Vanguard Group, Inc. (The)\", \"Blackrock Inc.\", \"Berkshire Hathaway,…  \n  \"reportDate\"   => Union{Missing, DateTime}[DateTime(\"2022-09-30T00:00:00\"), DateTime(\"2…  \n  \"pctHeld\"      => Union{Missing, Float64}[0.08, 0.0641, 0.0562, 0.0372, 0.0221, 0.0176,…  \n  \"position\"     => Union{Missing, Int64}[1272378901, 1020245185, 894802319, 591543874, 3…  \n  \"value\"        => Union{Missing, Int64}[164913030135, 132233979050, 115975329111, 76670…  \n  \"pctChange\"    => Union{Missing, Float64}[-0.0039, -0.0082, 0.0, -0.0111, 0.0191, 0.005…\n\njulia> using DataFrames\njulia> get_institutional_ownership(\"AAPL\") |> DataFrame\n10×6 DataFrame\n Row │ organization                   reportDate           pctHeld   position    value   ⋯\n     │ String                         DateTime?            Float64?  Int64?      Int64?  ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ Vanguard Group, Inc. (The)     2022-09-30T00:00:00    0.08    1272378901  1649130 ⋯\n   2 │ Blackrock Inc.                 2022-09-30T00:00:00    0.0641  1020245185  1322339  \n   3 │ Berkshire Hathaway, Inc        2022-09-30T00:00:00    0.0562   894802319  1159753  \n   4 │ State Street Corporation       2022-09-30T00:00:00    0.0372   591543874   766700  \n   5 │ FMR, LLC                       2022-09-30T00:00:00    0.0221   350900116   454801 ⋯\n   6 │ Geode Capital Management, LLC  2022-09-30T00:00:00    0.0176   279758518   362595  \n   7 │ Price (T.Rowe) Associates Inc  2022-09-30T00:00:00    0.0141   224863541   291445  \n   8 │ Morgan Stanley                 2022-09-30T00:00:00    0.0115   182728771   236834  \n   9 │ Northern Trust Corporation     2022-09-30T00:00:00    0.0111   176084862   228223 ⋯\n  10 │ Bank of America Corporation    2022-09-30T00:00:00    0.0089   142260591   184383  \n                                                                         2 columns omitted\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Major-Holders-Breakdown","page":"QuoteSummary","title":"Major Holders Breakdown","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_major_holders_breakdown","category":"page"},{"location":"QuoteSummary/#YFinance.get_major_holders_breakdown","page":"QuoteSummary","title":"YFinance.get_major_holders_breakdown","text":"get_major_holders_breakdown(quoteSummary::JSON3.Object)\n\nRetrievs the breakdown of the major holders from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_major_holders_breakdown\nOrderedDict{String, Real} with 4 entries:  \n  \"insidersPercentHeld\"          => 0.00072\n  \"institutionsPercentHeld\"      => 0.60915\n  \"institutionsFloatPercentHeld\" => 0.60959\n  \"institutionsCount\"            => 5526  \n\njulia> get_major_holders_breakdown(\"AAPL\")\nOrderedDict{String, Real} with 4 entries:  \n  \"insidersPercentHeld\"          => 0.00072\n  \"institutionsPercentHeld\"      => 0.60915\n  \"institutionsFloatPercentHeld\" => 0.60959\n  \"institutionsCount\"            => 5526\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Analyst-Recommendation-Trend","page":"QuoteSummary","title":"Analyst Recommendation Trend","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_recommendation_trend","category":"page"},{"location":"QuoteSummary/#YFinance.get_recommendation_trend","page":"QuoteSummary","title":"YFinance.get_recommendation_trend","text":"get_recommendation_trend(quoteSummary::JSON3.Object)\n\nRetrievs the recommendation trend from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_recommendation_trend\nOrderedDict{String, Vector} with 6 entries:\n  \"period\"     => [\"0m\", \"-1m\", \"-2m\", \"-3m\"]\n  \"strongbuy\"  => [11, 11, 11, 13]\n  \"buy\"        => [21, 25, 26, 20]\n  \"hold\"       => [6, 6, 5, 8]\n  \"sell\"       => [0, 1, 1, 0]\n  \"strongsell\" => [0, 0, 0, 0]\n\njulia> get_recommendation_trend(\"AAPL\")\nOrderedDict{String, Vector} with 6 entries:\n  \"period\"     => [\"0m\", \"-1m\", \"-2m\", \"-3m\"]\n  \"strongbuy\"  => [11, 11, 11, 13]\n  \"buy\"        => [21, 25, 26, 20]\n  \"hold\"       => [6, 6, 5, 8]\n  \"sell\"       => [0, 1, 1, 0]\n  \"strongsell\" => [0, 0, 0, 0]\n  \njulia> using DataFrames\njulia> get_recommendation_trend(\"AAPL\") |> DataFrame\n4×6 DataFrame\n Row │ period  strongbuy  buy    hold   sell   strongsell \n     │ String  Int64      Int64  Int64  Int64  Int64      \n─────┼────────────────────────────────────────────────────\n   1 │ 0m             11     21      6      0           0\n   2 │ -1m            11     25      6      1           0\n   3 │ -2m            11     26      5      1           0\n   4 │ -3m            13     20      8      0           0\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Up-and-Downgrade-History","page":"QuoteSummary","title":"Up- & Downgrade History","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_upgrade_downgrade_history","category":"page"},{"location":"QuoteSummary/#YFinance.get_upgrade_downgrade_history","page":"QuoteSummary","title":"YFinance.get_upgrade_downgrade_history","text":"get_upgrade_downgrade_history(quoteSummary::JSON3.Object)\n\nRetrievs the upgrade and downgrade history from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_upgrade_downgrade_history\nOrderedDict{String, Vector} with 5 entries:\n  \"firm\"      => [\"JP Morgan\", \"UBS\", \"Morgan Stanley\", \"B of A Securities\", \"Barclays\", …  \n  \"date\"      => Union{Missing, DateTime}[DateTime(\"2022-12-20T11:47:33\"), DateTime(\"2022…  \n  \"toGrade\"   => Union{Missing, String}[\"Overweight\", \"Buy\", \"Overweight\", \"Neutral\", \"Eq…  \n  \"fromGrade\" => Union{Missing, String}[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"  …  \"\", \"\"…  \n  \"action\"    => Union{Missing, String}[\"main\", \"main\", \"main\", \"main\", \"main\", \"main\", \"…\n\njulia> get_upgrade_downgrade_history(\"AAPL\")\nOrderedDict{String, Vector} with 5 entries:\n  \"firm\"      => [\"JP Morgan\", \"UBS\", \"Morgan Stanley\", \"B of A Securities\", \"Barclays\", …  \n  \"date\"      => Union{Missing, DateTime}[DateTime(\"2022-12-20T11:47:33\"), DateTime(\"2022…  \n  \"toGrade\"   => Union{Missing, String}[\"Overweight\", \"Buy\", \"Overweight\", \"Neutral\", \"Eq…  \n  \"fromGrade\" => Union{Missing, String}[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"  …  \"\", \"\"…  \n  \"action\"    => Union{Missing, String}[\"main\", \"main\", \"main\", \"main\", \"main\", \"main\", \"…\n  \njulia> using DataFrames\njulia> get_upgrade_downgrade_history(\"AAPL\") |> DataFrame\n872×5 DataFrame\n Row │ firm               date                 toGrade       fromGrade  action  \n     │ String             DateTime?            String?       String?    String? \n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ JP Morgan          2022-12-20T11:47:33  Overweight               main\n   2 │ UBS                2022-11-08T12:17:03  Buy                      main\n   3 │ Morgan Stanley     2022-11-08T12:14:23  Overweight               main\n   4 │ B of A Securities  2022-11-07T13:08:30  Neutral                  main\n   5 │ Barclays           2022-11-07T12:39:27  Equal-Weight             main\n   6 │ Wedbush            2022-10-28T13:19:17  Outperform               main\n   7 │ Credit Suisse      2022-10-28T11:59:30  Outperform               main\n  ⋮  │         ⋮                   ⋮                ⋮            ⋮         ⋮\n 867 │ Oxen Group         2012-03-14T15:25:00  Buy                      init\n 868 │ Canaccord Genuity  2012-03-14T08:21:00  Buy                      main\n 869 │ Morgan Stanley     2012-03-14T06:13:00  Overweight               main\n 870 │ Jefferies          2012-03-13T06:08:00  Buy                      main\n 871 │ FBN Securities     2012-03-08T07:33:00  Outperform               main\n 872 │ Canaccord Genuity  2012-02-09T08:17:00  Buy                      main\n                                                                859 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Summary-Detail","page":"QuoteSummary","title":"Summary Detail","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_summary_detail","category":"page"},{"location":"QuoteSummary/#YFinance.get_summary_detail","page":"QuoteSummary","title":"YFinance.get_summary_detail","text":"get_summary_detail(quoteSummary::JSON3.Object)\n\nRetrievs the summaryDetail Item from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_summary_detail\nOrderedDict{String, Any} with 41 entries:\n  \"priceHint\"                  => 2\n  \"previousClose\"              => 126.04\n  \"open\"                       => 127.99\n  \"dayLow\"                     => 127.815\n  \"dayHigh\"                    => 130.48\n  \"regularMarketPreviousClose\" => 126.04\n  \"regularMarketOpen\"          => 127.99\n  \"regularMarketDayLow\"        => 127.815\n  \"regularMarketDayHigh\"       => 130.48\n  \"dividendRate\"               => 0.92\n  \"dividendYield\"              => 0.0073\n  \"exDividendDate\"             => 1667520000\n  \"payoutRatio\"                => 0.1473\n  \"fiveYearAvgDividendYield\"   => 0.99\n  \"beta\"                       => 1.21947\n  \"trailingPE\"                 => 21.2128\n  \"forwardPE\"                  => 19.1448\n  ⋮                            => ⋮\n\njulia> get_summary_detail(\"AAPL\")\nOrderedDict{String, Any} with 41 entries:\n  \"priceHint\"                  => 2\n  \"previousClose\"              => 126.04\n  \"open\"                       => 127.99\n  \"dayLow\"                     => 127.815\n  \"dayHigh\"                    => 130.48\n  \"regularMarketPreviousClose\" => 126.04\n  \"regularMarketOpen\"          => 127.99\n  \"regularMarketDayLow\"        => 127.815\n  \"regularMarketDayHigh\"       => 130.48\n  \"dividendRate\"               => 0.92\n  \"dividendYield\"              => 0.0073\n  \"exDividendDate\"             => 1667520000\n  \"payoutRatio\"                => 0.1473\n  \"fiveYearAvgDividendYield\"   => 0.99\n  \"beta\"                       => 1.21947\n  \"trailingPE\"                 => 21.2128\n  \"forwardPE\"                  => 19.1448\n  ⋮                            => ⋮\n\n\n\n\n\n","category":"function"},{"location":"QuoteSummary/#Sector-and-Industry","page":"QuoteSummary","title":"Sector & Industry","text":"","category":"section"},{"location":"QuoteSummary/","page":"QuoteSummary","title":"QuoteSummary","text":"get_sector_industry","category":"page"},{"location":"QuoteSummary/#YFinance.get_sector_industry","page":"QuoteSummary","title":"YFinance.get_sector_industry","text":"get_sector_industry(quoteSummary::JSON3.Object)\n\nRetrievs the Sector and Industry from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_sector_industry\nOrderedDict{String, String} with 2 entries:\n  \"sector\"   => \"Technology\"\n  \"industry\" => \"Consumer Electronics\"\n\njulia> get_sector_industry(\"AAPL\")\nOrderedDict{String, String} with 2 entries:\n  \"sector\"   => \"Technology\"\n  \"industry\" => \"Consumer Electronics\"\n\n\n\n\n\n","category":"function"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: Master vs v0.1.3\nBug Fixget_prices now returns dictionaries containing price vectors of type Array{Float64} rather than Array{ Union{Nothing,Float64}} (#7) Improvementsget_prices now runs faster than before.New Functionalityget_symbols allows the user to search for yahoo finance symbols from (partial) company/security names\nget_all_symbols exposes all tickers from the NASDAQ, AMEX, and NYSE exchanges (#8)DocsAdded documentation for the new functionality\nAdded a clarification statement in the Readme.md and Docs that YFinance uses API endpoints to access data and does not suffer from decryption issues (#6)","category":"page"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: v0.1.3\nBug Fixget_prices would error when autoadjust=true for some tickers when Yahoo returns nothing for some observations in the price time series. The update now does not error in this cases and returns NaN for the missing datapoints. NaN is used instead of Missing because of performance improvements and the ability to integrate YFinance.jl with TimeSeries.jl. (#5) \nThank you RaSi96 for reporting this bug and helping me sort it out!DocsImproved documentation for get_prices (#5)\nWhen the range keyword is used instead of startdt and enddt the specified interval is not observed by Yahoo at longer ranges. To enforce the specified interval use startdt and enddt instead. \nData points that yahoo returns as nothing are returned as NaN. It seems like Yahoo thinks it should have price information for these timestamps but does not have them and thus returns nothing.OtherAdded a test case for the stock \"ADANIENT.NS\". The time series of the stock prices contains the nothing values mentioned in the Bug Fix. (#5)","category":"page"},{"location":"VersionChanges/","page":"Version Change Log","title":"Version Change Log","text":"info: v0.1.2\nChangesReturn OrderedDict from OrderedCollections.jl instead of Dict\nShould be non breaking as all functions that work for Base.Dict also work for OrderedCollections.OrderedDict\nAllow the setting of HTTP proxies (through HTTP.jl). Also allows for secured HTTP proxies with a username and password\nDefault is no proxy so change is non breakingFixes:get_Fundamentals() does now return a timestampDocsAdded Documentation for the proxy settings\nAdded an Example Section:\nSome quick code to convert Price data to a DataFrame, TimeSeries.TimeArray, TSFrames.TSFrame\nGave some examples of plotting some data exposed by YFinance.jl with PlotlyJS.jl\nAdded this version change logNew DependenciesBase64\nNeeded for http proxy authentication\nOrderedCollections.jl\nProvides Ordered Dictionaries. Eases workflow with data because column order is not arbitrary and changing between calls.","category":"page"},{"location":"AllFunctions/#All-Functions","page":"All Functions","title":"All Functions","text":"","category":"section"},{"location":"AllFunctions/","page":"All Functions","title":"All Functions","text":"Modules = [YFinance]","category":"page"},{"location":"AllFunctions/#YFinance.clear_proxy_settings-Tuple{}","page":"All Functions","title":"YFinance.clear_proxy_settings","text":"clear_proxy_settings()\n\nClears the proxy settings by setting them back to their default (no proxy configuration).    \n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.create_proxy_settings","page":"All Functions","title":"YFinance.create_proxy_settings","text":"create_proxy_settings(p::AbstractString,user=nothing,password=nothing)\n\nSets the global proxy variable _PROXY_SETTINGS::NamedTuple. This NamedTuple contains a proxy and a auth field. These fields default to nothing and and empty Dict respectively.\n\nArguments\n\np::String (Required) of the form: \"http://proxy.xyz.com:8080\"\nuser::String Username (optional) only required if proxy requires authentication. Defaults to nothing (no authentication needed)\npassword::String The password corresponding to the Username. Defaults to nothing (no authentication needed) \n\n\n\n\n\n","category":"function"},{"location":"AllFunctions/#YFinance.get_ESG-Tuple{String}","page":"All Functions","title":"YFinance.get_ESG","text":"get_ESG(symbol::String)\n\nRetrievs ESG Scores from Yahoo Finance stored in a OrderedCollections.OrderedDict with two items. One, score, contains the companies ESG scores and individal Overall, Environment, Social and  Goverance Scores as well as a timestamp of type DateTime. The other,  peer_score, contains the peer group's scores. The subdictionaries can be transformed to DataFrames\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\n\nExamples\n\njulia> get_ESG(\"AAPL\")\nOrderedDict{String, OrderedDict{String, Any}} with 2 entries:\n  \"score\"      => OrderedDict(\"symbol\"=>\"AAPL\", \"timestamp\"=>[DateTime(\"2014-09-01T00:00:…\n  \"peer_score\" => OrderedDict(\"symbol\"=>\"Technology Hardware\", \"timestamp\"=>[DateTime(\"20…\n\njulia> using DataFrames\njulia> get_ESG(\"AAPL\")[\"score\"] |> DataFrame\n96×6 DataFrame\n Row │ symbol  timestamp            esgScore    governanceScore  environmentScore  socialScore \n     │ String  DateTime             Real?       Real?            Real?             Real?       \n─────┼─────────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2014-09-01T00:00:00       61               62                74           45\n   2 │ AAPL    2014-10-01T00:00:00       60               62                74           45\n   3 │ AAPL    2014-11-01T00:00:00       61               62                74           45\n  ⋮  │   ⋮              ⋮               ⋮              ⋮                ⋮               ⋮\n  95 │ AAPL    2022-07-01T00:00:00  missing          missing           missing      missing    \n  96 │ AAPL    2022-08-01T00:00:00       16.68             9.18              0.65         6.86\n                                                                                91 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_Fundamental-Tuple{AbstractString, AbstractString, AbstractString, Any, Any}","page":"All Functions","title":"YFinance.get_Fundamental","text":"get_Fundamental(symbol::AbstractString, item::AbstractString,interval::AbstractString, startdt, enddt)\n\nRetrievs financial statement information from Yahoo Finance stored in a OrderedCollections.OrderedDict.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nitem::String can either be an entire financial statement or a subitem. Entire financial statements:\"income_statement\", \"valuation\", \"cash_flow\", \"balance_sheet\". To see valid sub items grouped by financial statement type in a OrderedCollections.OrderedDict call _Fundamental_Types  \ninterval::String can be one of \"annual\", \"quarterly\", \"monthly\"  \nstartdt and enddt take the following types: ::Date,::DateTime, or a String of the following form yyyy-mm-dd  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\n\nExamples\n\njulia> get_Fundamental(\"NFLX\", \"income_statement\",\"quarterly\",\"2000-01-01\",\"2022-12-31\")\nOrderedDict{String, Any} with 40 entries:\n  \"timestamp\"                       => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-0…  \"GeneralAndAdministrativeExpense\" => Any[397790000, 397928000, 409297000, 373213000]    \n  \"SellingGeneralAndAdministration\" => Any[1190503000, 953906000, 984257000, 941167000]   \n  \"InterestIncome\"                  => Any[108512000, 195645000, 220226000, 261404000]    \n  \"OperatingRevenue\"                => Any[7709318000, 7867767000, 7970141000, 7925589000]  \"DilutedNIAvailtoComStockholders\" => Any[607429000, 1597447000, 1440951000, 1398242000] \n  \"NormalizedIncome\"                => Any[607429000, 1597447000, 1440951000, 1398242000] \n  \"NetIncomeCommonStockholders\"     => Any[607429000, 1597447000, 1440951000, 1398242000] \n  \"BasicAverageShares\"              => Any[443462000, 444146000, 444557000, 444878000]    \n  ⋮                                 => ⋮\n\n\njulia> using DataFrames\njulia> get_Fundamental(\"AAPL\", \"InterestExpense\",\"quarterly\",\"2000-01-01\",\"2022-12-31\") |> DataFrame\n4×2 DataFrame\n Row │ timestamp            InterestExpense \n     │ DateTime             Any\n─────┼──────────────────────────────────────\n   1 │ 2021-12-31T00:00:00  694000000\n   2 │ 2022-03-31T00:00:00  691000000\n   3 │ 2022-06-30T00:00:00  719000000\n   4 │ 2022-09-30T00:00:00  827000000\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_Options-Tuple{String}","page":"All Functions","title":"YFinance.get_Options","text":"get_Options(symbol::String)\n\nRetrievs options data from Yahoo Finance stored in a OrderedCollections.OrderedDict with two items. One contains Call options the other Put options. These subitems are OrderedCollections.OrderedDict themselves. The call and put options OrderedCollections.OrderedDict can readily be transformed to a DataFrame.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\n\nExamples\n\njulia> get_Options(\"AAPL\")\nOrderedDict{String, OrderedDict{String, Vector{Any}}} with 2 entries:\n  \"calls\" => OrderedDict(\"contractSymbol\"=>[\"AAPL221230C00050000\", \"AAPL221230C00055000\",…\n  \"puts\"  => OrderedDict(\"contractSymbol\"=>[\"AAPL221230P00050000\", \"AAPL221230P00055000\",…\n\njulia> using DataFrames\njulia> get_Options(\"AAPL\")[\"calls\"] |> DataFrame\n72×16 DataFrame\n Row │ contractSymbol       strike  currency  lastPrice  change  percentChange  volume   ⋯\n     │ Any                  Any     Any       Any        Any     Any            Any      ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL221230C00050000  50      USD       79.85      0       0              1        ⋯\n   2 │ AAPL221230C00055000  55      USD       72.85      0       0              1\n   3 │ AAPL221230C00060000  60      USD       66.4       0       0              19        \n  ⋮  │          ⋮             ⋮        ⋮          ⋮        ⋮           ⋮           ⋮     ⋱\n  71 │ AAPL221230C00230000  230     USD       0.02       0       0              missing   \n  72 │ AAPL221230C00250000  250     USD       0.01       0       0              2        ⋯\n                                                             9 columns and 67 rows omitted\n\njulia> using DataFrames\njulia> data  = get_Options(\"AAPL\");\njulia> vcat( [DataFrame(i) for i in values(data)]...)\n141×16 DataFrame\n Row │ contractSymbol       strike  currency  lastPrice  change  percentChange  volume   ⋯\n     │ Any                  Any     Any       Any        Any     Any            Any      ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ AAPL221230C00050000  50      USD       79.85      0       0              1        ⋯\n   2 │ AAPL221230C00055000  55      USD       72.85      0       0              1\n   3 │ AAPL221230C00060000  60      USD       66.4       0       0              19        \n  ⋮  │          ⋮             ⋮        ⋮          ⋮        ⋮           ⋮          ⋮      ⋱\n 140 │ AAPL221230P00225000  225     USD       94.65      0       0              1\n 141 │ AAPL221230P00230000  230     USD       99.65      0       0              1        ⋯\n                                                            9 columns and 136 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_all_symbols-Tuple{T} where T<:String","page":"All Functions","title":"YFinance.get_all_symbols","text":"get_all_symbols(market::T)::Vector{T} where {T<:String}\n\nFetch all the symbols from a given market.\n\nArguments\n\nmarket::String: The market to fetch the symbols from.\n\nCurrently supported markets are:\n\nAMEX\nNASDAQ\nNYSE  \n\nUses dumbstockapi.com\n\nReturns\n\nVector{String}: A vector of strings containing the symbols.\n\nExample\n\njulia> get_all_symbols(\"NYSE\")\n3127-element Vector{String}:\n \"A\"\n \"AA\"\n \"AAC\"\n \"AAN\"\n ⋮\n \"ZTR\"\n \"ZTS\"\n \"ZUO\"\n \"ZYME\"\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_calendar_events-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_calendar_events","text":"get_calendar_events(quoteSummary::JSON3.Object)\n\nRetrievs calendar events from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_calendar_events\nOrderedDict{String, Any} with 3 entries:\n  \"dividend_date\"   => DateTime(\"2022-11-10T00:00:00\")\n  \"earnings_dates\"  => [DateTime(\"2023-01-25T10:59:00\"), DateTime(\"2023-01-30T12:00:00\")]\n  \"exdividend_date\" => DateTime(\"2022-11-04T00:00:00\")\n\njulia> get_calendar_events(\"AAPL\")\nOrderedDict{String, Any} with 3 entries:\n  \"dividend_date\"   => DateTime(\"2022-11-10T00:00:00\")\n  \"earnings_dates\"  => [DateTime(\"2023-01-25T10:59:00\"), DateTime(\"2023-01-30T12:00:00\")]\n  \"exdividend_date\" => DateTime(\"2022-11-04T00:00:00\")\n\njulia> using DataFrames\njulia> get_calendar_events(\"AAPL\") |> DataFrame\n2×3 DataFrame\n Row │ dividend_date        earnings_dates       exdividend_date     \n     │ DateTime             DateTime             DateTime\n─────┼───────────────────────────────────────────────────────────────\n   1 │ 2022-11-10T00:00:00  2023-01-25T10:59:00  2022-11-04T00:00:00\n   2 │ 2022-11-10T00:00:00  2023-01-30T12:00:00  2022-11-04T00:00:00\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_earnings_estimates-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_earnings_estimates","text":"get_earnings_estimates(quoteSummary::JSON3.Object)\n\nRetrievs the earnings estimates from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_earnings_estimates\nOrderedDict{String, Vector} with 3 entries:\n  \"quarter\"  => [\"4Q2021\", \"1Q2022\", \"2Q2022\", \"3Q2022\", \"4Q2022\"]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27, 1.98]\n  \"actual\"   => Union{Missing, Float64}[2.1, 1.52, 1.2, 1.29, missing]\n\njulia> get_earnings_estimates(\"AAPL\")\nOrderedDict{String, Vector} with 3 entries:\n  \"quarter\"  => [\"4Q2021\", \"1Q2022\", \"2Q2022\", \"3Q2022\", \"4Q2022\"]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27, 1.98]\n  \"actual\"   => Union{Missing, Float64}[2.1, 1.52, 1.2, 1.29, missing]\n\njulia> using DataFrames\njulia> get_earnings_estimates(\"AAPL\") |> DataFrame\n5×3 DataFrame\n Row │ quarter  estimate  actual     \n     │ String   Float64   Float64?   \n─────┼───────────────────────────────\n   1 │ 4Q2021       1.89        2.1\n   2 │ 1Q2022       1.43        1.52\n   3 │ 2Q2022       1.16        1.2\n   4 │ 3Q2022       1.27        1.29\n   5 │ 4Q2022       1.98  missing   \n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_eps-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_eps","text":"get_eps(quoteSummary::JSON3.Object)\n\nRetrievs the earnings per share from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_eps\nOrderedDict{String, Vector} with 4 entries:\n  \"quarter\"  => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-03-31T00:00:00\"), DateTime(\"2022-06-30T00:00:00\"), DateTime(\"2022-09-30T00:00:00\")]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27]\n  \"actual\"   => [2.1, 1.52, 1.2, 1.29]\n  \"surprise\" => [0.111, 0.063, 0.034, 0.016]\n\njulia> get_eps(\"AAPL\")\nOrderedDict{String, Vector} with 4 entries:\n  \"quarter\"  => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-03-31T00:00:00\"), DateTime(\"2022-06-30T00:00:00\"), DateTime(\"2022-09-30T00:00:00\")]\n  \"estimate\" => [1.89, 1.43, 1.16, 1.27]\n  \"actual\"   => [2.1, 1.52, 1.2, 1.29]\n  \"surprise\" => [0.111, 0.063, 0.034, 0.016]\n\njulia> using DataFrames\njulia> get_eps(\"AAPL\") |> DataFrame\n4×4 DataFrame\n Row │ quarter              estimate  actual   surprise \n     │ DateTime             Float64   Float64  Float64  \n─────┼──────────────────────────────────────────────────\n   1 │ 2021-12-31T00:00:00      1.89     2.1      0.111\n   2 │ 2022-03-31T00:00:00      1.43     1.52     0.063\n   3 │ 2022-06-30T00:00:00      1.16     1.2      0.034\n   4 │ 2022-09-30T00:00:00      1.27     1.29     0.016\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_insider_holders-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_insider_holders","text":"get_insider_holders(quoteSummary::JSON3.Object)\n\nRetrievs the insiders holdings from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_insider_holders\nOrderedDict{String, Vector} with 8 entries:\n    \"name\"                 => [\"ADAMS KATHERINE L\", \"BELL JAMES A\", \"JUNG ANDREA\", \"KONDO C…\n    \"relation\"             => Union{Missing, String}[\"General Counsel\", \"Director\", \"Direct…  \n    \"description\"          => Union{Missing, String}[\"Sale\", \"Stock Gift\", \"Conversion of E…  \n    \"lastestTransDate\"     => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionDirect\"       => Union{Missing, Int64}[427334, 34990, 139594, 31505, 4588720, …  \n    \"positionDirectDate\"   => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionIndirect\"     => Union{Missing, Int64}[missing, missing, missing, missing, mis…  \n    \"positionIndirectDate\" => Union{Missing, DateTime}[missing, missing, missing, missing, …\n\njulia> get_insider_holders(\"AAPL\")\nOrderedDict{String, Vector} with 8 entries:\n    \"name\"                 => [\"ADAMS KATHERINE L\", \"BELL JAMES A\", \"JUNG ANDREA\", \"KONDO C…\n    \"relation\"             => Union{Missing, String}[\"General Counsel\", \"Director\", \"Direct…  \n    \"description\"          => Union{Missing, String}[\"Sale\", \"Stock Gift\", \"Conversion of E…  \n    \"lastestTransDate\"     => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionDirect\"       => Union{Missing, Int64}[427334, 34990, 139594, 31505, 4588720, …  \n    \"positionDirectDate\"   => Union{Missing, DateTime}[DateTime(\"2022-10-03T00:00:00\"), Dat…  \n    \"positionIndirect\"     => Union{Missing, Int64}[missing, missing, missing, missing, mis…  \n    \"positionIndirectDate\" => Union{Missing, DateTime}[missing, missing, missing, missing, …\n\n\njulia> using DataFrames\njulia> get_insider_holders(\"AAPL\") |> DataFrame\n10×8 DataFrame\n Row │ name                relation                 description                        l ⋯\n     │ String              String?                  String?                            D ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ ADAMS KATHERINE L   General Counsel          Sale                               2 ⋯\n   2 │ BELL JAMES A        Director                 Stock Gift                         2  \n   3 │ JUNG ANDREA         Director                 Conversion of Exercise of deriva…  2  \n   4 │ KONDO CHRISTOPHER   Officer                  Sale                               2  \n   5 │ LEVINSON ARTHUR D   Director                 Sale                               2 ⋯\n   6 │ MAESTRI LUCA        Chief Financial Officer  Sale                               2  \n   7 │ O'BRIEN DEIRDRE     Officer                  Sale                               2  \n   8 │ SUGAR RONALD D      Director                 Conversion of Exercise of deriva…  2  \n   9 │ WAGNER SUSAN L      Director                 Conversion of Exercise of deriva…  2 ⋯\n  10 │ WILLIAMS JEFFREY E  Chief Operating Officer  Conversion of Exercise of deriva…  2  \n                                                                         5 columns omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_insider_transactions-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_insider_transactions","text":"get_insider_transactions(quoteSummary::JSON3.Object)\n\nRetrievs the insider transactions from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_insider_transactions\nOrderedDict{String, Vector} with 7 entries:\n  \"filerName\"       => [\"KONDO CHRISTOPHER\", \"MAESTRI LUCA\", \"O'BRIEN DEIRDRE\", \"KONDO CH…  \n  \"filerRelation\"   => Union{Missing, String}[\"Officer\", \"Chief Financial Officer\", \"Offi…  \n  \"transactionText\" => Union{Missing, String}[\"Sale at price 148.72 per share.\", \"Sale at…  \n  \"date\"            => Union{Missing, DateTime}[DateTime(\"2022-11-22T00:00:00\"), DateTime…  \n  \"ownership\"       => Union{Missing, String}[\"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"I\"…  \n  \"shares\"          => Union{Missing, Int64}[20200, 176299, 8053, 13136, 16612, 181139, 1…  \n  \"value\"           => Union{Missing, Int64}[3004144, 27493275, 1147150, missing, missing…\n\njulia> get_insider_transactions(\"AAPL\")\nOrderedDict{String, Vector} with 7 entries:\n  \"filerName\"       => [\"KONDO CHRISTOPHER\", \"MAESTRI LUCA\", \"O'BRIEN DEIRDRE\", \"KONDO CH…  \n  \"filerRelation\"   => Union{Missing, String}[\"Officer\", \"Chief Financial Officer\", \"Offi…  \n  \"transactionText\" => Union{Missing, String}[\"Sale at price 148.72 per share.\", \"Sale at…  \n  \"date\"            => Union{Missing, DateTime}[DateTime(\"2022-11-22T00:00:00\"), DateTime…  \n  \"ownership\"       => Union{Missing, String}[\"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"D\", \"I\"…  \n  \"shares\"          => Union{Missing, Int64}[20200, 176299, 8053, 13136, 16612, 181139, 1…  \n  \"value\"           => Union{Missing, Int64}[3004144, 27493275, 1147150, missing, missing…\n\njulia> using DataFrames\njulia> get_insider_transactions(\"AAPL\") |> DataFrame\n75×7 DataFrame\n Row │ filerName           filerRelation            transactionText                    d ⋯\n     │ String              String?                  String?                            D ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ KONDO CHRISTOPHER   Officer                  Sale at price 148.72 per share.    2 ⋯\n   2 │ MAESTRI LUCA        Chief Financial Officer  Sale at price 154.70 - 157.20 pe…  2  \n   3 │ O'BRIEN DEIRDRE     Officer                  Sale at price 142.45 per share.    2  \n   4 │ KONDO CHRISTOPHER   Officer                                                     2  \n   5 │ O'BRIEN DEIRDRE     Officer                                                     2 ⋯   \n   6 │ ADAMS KATHERINE L   General Counsel          Sale at price 138.44 - 142.93 pe…  2  \n   7 │ O'BRIEN DEIRDRE     Officer                  Sale at price 141.09 - 142.83 pe…  2  \n  ⋮  │         ⋮                      ⋮                             ⋮                    ⋱\n  70 │ WAGNER SUSAN L      Director                                                    2  \n  71 │ JUNG ANDREA         Director                                                    2 ⋯\n  72 │ BELL JAMES A        Director                                                    2  \n  73 │ LOZANO MONICA C.    Director                                                    2  \n  74 │ GORE ALBERT A JR    Director                                                    2  \n  75 │ ADAMS KATHERINE L   General Counsel          Sale at price 131.79 - 134.56 pe…  2 ⋯\n                                                             4 columns and 62 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_institutional_ownership-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_institutional_ownership","text":"get_institutional_ownership(quoteSummary::JSON3.Object)\n\nRetrievs the institutional ownership from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_institutional_ownership\nOrderedDict{String, Vector} with 6 entries:\n  \"organization\" => [\"Vanguard Group, Inc. (The)\", \"Blackrock Inc.\", \"Berkshire Hathaway,…  \n  \"reportDate\"   => Union{Missing, DateTime}[DateTime(\"2022-09-30T00:00:00\"), DateTime(\"2…  \n  \"pctHeld\"      => Union{Missing, Float64}[0.08, 0.0641, 0.0562, 0.0372, 0.0221, 0.0176,…  \n  \"position\"     => Union{Missing, Int64}[1272378901, 1020245185, 894802319, 591543874, 3…  \n  \"value\"        => Union{Missing, Int64}[164913030135, 132233979050, 115975329111, 76670…  \n  \"pctChange\"    => Union{Missing, Float64}[-0.0039, -0.0082, 0.0, -0.0111, 0.0191, 0.005…\n\njulia> get_institutional_ownership(\"AAPL\")\nOrderedDict{String, Vector} with 6 entries:\n  \"organization\" => [\"Vanguard Group, Inc. (The)\", \"Blackrock Inc.\", \"Berkshire Hathaway,…  \n  \"reportDate\"   => Union{Missing, DateTime}[DateTime(\"2022-09-30T00:00:00\"), DateTime(\"2…  \n  \"pctHeld\"      => Union{Missing, Float64}[0.08, 0.0641, 0.0562, 0.0372, 0.0221, 0.0176,…  \n  \"position\"     => Union{Missing, Int64}[1272378901, 1020245185, 894802319, 591543874, 3…  \n  \"value\"        => Union{Missing, Int64}[164913030135, 132233979050, 115975329111, 76670…  \n  \"pctChange\"    => Union{Missing, Float64}[-0.0039, -0.0082, 0.0, -0.0111, 0.0191, 0.005…\n\njulia> using DataFrames\njulia> get_institutional_ownership(\"AAPL\") |> DataFrame\n10×6 DataFrame\n Row │ organization                   reportDate           pctHeld   position    value   ⋯\n     │ String                         DateTime?            Float64?  Int64?      Int64?  ⋯\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ Vanguard Group, Inc. (The)     2022-09-30T00:00:00    0.08    1272378901  1649130 ⋯\n   2 │ Blackrock Inc.                 2022-09-30T00:00:00    0.0641  1020245185  1322339  \n   3 │ Berkshire Hathaway, Inc        2022-09-30T00:00:00    0.0562   894802319  1159753  \n   4 │ State Street Corporation       2022-09-30T00:00:00    0.0372   591543874   766700  \n   5 │ FMR, LLC                       2022-09-30T00:00:00    0.0221   350900116   454801 ⋯\n   6 │ Geode Capital Management, LLC  2022-09-30T00:00:00    0.0176   279758518   362595  \n   7 │ Price (T.Rowe) Associates Inc  2022-09-30T00:00:00    0.0141   224863541   291445  \n   8 │ Morgan Stanley                 2022-09-30T00:00:00    0.0115   182728771   236834  \n   9 │ Northern Trust Corporation     2022-09-30T00:00:00    0.0111   176084862   228223 ⋯\n  10 │ Bank of America Corporation    2022-09-30T00:00:00    0.0089   142260591   184383  \n                                                                         2 columns omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_major_holders_breakdown-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_major_holders_breakdown","text":"get_major_holders_breakdown(quoteSummary::JSON3.Object)\n\nRetrievs the breakdown of the major holders from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_major_holders_breakdown\nOrderedDict{String, Real} with 4 entries:  \n  \"insidersPercentHeld\"          => 0.00072\n  \"institutionsPercentHeld\"      => 0.60915\n  \"institutionsFloatPercentHeld\" => 0.60959\n  \"institutionsCount\"            => 5526  \n\njulia> get_major_holders_breakdown(\"AAPL\")\nOrderedDict{String, Real} with 4 entries:  \n  \"insidersPercentHeld\"          => 0.00072\n  \"institutionsPercentHeld\"      => 0.60915\n  \"institutionsFloatPercentHeld\" => 0.60959\n  \"institutionsCount\"            => 5526\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_prices-Tuple{AbstractString}","page":"All Functions","title":"YFinance.get_prices","text":"get_prices(symbol::AbstractString; range::AbstractString=\"1mo\", interval::AbstractString=\"1d\",startdt=\"\", enddt=\"\",prepost=false,autoadjust=true,timeout = 10,throw_error=false,exchange_local_time=false)\n\nRetrievs prices from Yahoo Finance.\n\nArguments\n\nSmybol is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)\n\nYou can either provide a range or a startdt and an enddt.\n\nrange takes the following values: \"1d\",\"5d\",\"1mo\",\"3mo\",\"6mo\",\"1y\",\"2y\",\"5y\",\"10y\",\"ytd\",\"max\". Note: when range is selected rather than startdt or enddt the specified interval may not be observed by Yahoo! Therefore, it is recommended to use startdt and enddt instead. To get max simply set startdt = \"1900-01-01\"\nstartdt and enddt take the following types: ::Date,::DateTime, or a String of the following form yyyy-mm-dd\nprepost is a boolean indicating whether pre and post periods should be included. Defaults to false\nautoadjust defaults to true. It adjusts open, high, low, close prices, and volume by multiplying by the ratio between the close and the adjusted close prices - only available for intervals of 1d and up. \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\nexchange_local _time::Bool defaults to false. If set to true the timestamp corresponds to the exchange local time else to GMT.\n\nExamples\n\njulia> get_prices(\"AAPL\",range=\"1d\",interval=\"90m\")\nOrderedDict{String, Any} with 7 entries:\n  \"ticker\"    => \"AAPL\"\n  \"timestamp\" => [DateTime(\"2022-12-29T14:30:00\"), DateTime(\"2022-12-29T16:00:00\"), DateTime(\"2022-12-29T17:30:00\"), DateTime(\"2022-12-29T19:00:00\"), DateTime(\"2022-12-29T20:30:00\"), DateTime(\"2022-12-29T21:00:00\")]   \n  \"open\"      => [127.99, 129.96, 129.992, 130.035, 129.95, 129.61]\n  \"high\"      => [129.98, 130.481, 130.098, 130.24, 130.22, 129.61]\n  \"low\"       => [127.73, 129.44, 129.325, 129.7, 129.56, 129.61]\n  \"close\"     => [129.954, 129.998, 130.035, 129.95, 129.6, 129.61]\n  \"vol\"       => [29101646, 14058713, 9897737, 9552323, 6308537, 0]\n\nCan be easily converted to a DataFrame\n\njulia> using DataFrames\njulia> get_prices(\"AAPL\",range=\"1d\",interval=\"90m\") |> DataFrame\n6×7 DataFrame\n Row │ ticker  timestamp            open     high     low      close    vol      \n     │ String  DateTime             Float64  Float64  Float64  Float64  Int64    \n─────┼───────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2022-12-29T14:30:00  127.99   129.98   127.73   129.954  29101646 \n   2 │ AAPL    2022-12-29T16:00:00  129.96   130.481  129.44   129.998  14058713 \n   3 │ AAPL    2022-12-29T17:30:00  129.992  130.098  129.325  130.035   9897737 \n   4 │ AAPL    2022-12-29T19:00:00  130.035  130.24   129.7    129.95    9552323 \n   5 │ AAPL    2022-12-29T20:30:00  129.95   130.22   129.56   129.6     6308537 \n   6 │ AAPL    2022-12-29T21:00:00  129.61   129.61   129.61   129.61          0 \n\nBroadcasting\n\njulia> get_prices.([\"AAPL\",\"NFLX\"],range=\"1d\",interval=\"90m\")\nOrderedDict(\"ticker\" => \"AAPL\",\n    \"timestamp\" => [DateTime(\"2022-12-29T14:30:00\"), DateTime(\"2022-12-29T16:00:00\"), DateTime(\"2022-12-29T17:30:00\"), DateTime(\"2022-12-29T19:00:00\"), DateTime(\"2022-12-29T20:30:00\"), DateTime(\"2022-12-29T21:00:00\")], \n    \"open\" => [127.98999786376953, 129.9600067138672, 129.99240112304688, 130.03500366210938, 129.9499969482422, 129.61000061035156], \n    \"high\" => [129.97999572753906, 130.4813995361328, 130.09829711914062, 130.24000549316406, 130.22000122070312, 129.61000061035156], \n    \"low\" => [127.7300033569336, 129.44000244140625, 129.3249969482422, 129.6999969482422, 129.55999755859375, 129.61000061035156], \n    \"close\" => [129.95419311523438, 129.99830627441406, 130.03500366210938, 129.9499969482422, 129.60000610351562, 129.61000061035156], \n    \"vol\" => [29101646, 14058713, 9897737, 9552323, 6308537, 0])\nOrderedDict(\"ticker\" => \"NFLX\",\n    \"timestamp\" => [DateTime(\"2022-12-29T14:30:00\"), DateTime(\"2022-12-29T16:00:00\"), DateTime(\"2022-12-29T17:30:00\"), DateTime(\"2022-12-29T19:00:00\"), DateTime(\"2022-12-29T20:30:00\"), DateTime(\"2022-12-29T21:00:00\")],\n    \"open\" => [283.17999267578125, 289.5199890136719, 293.4200134277344, 290.05499267578125, 290.760009765625, 291.1199951171875],\n    \"high\" => [291.8699951171875, 295.4999084472656, 293.5, 291.32000732421875, 292.3299865722656, 291.1199951171875],\n    \"low\" => [281.010009765625, 289.489990234375, 289.5400085449219, 288.7699890136719, 290.5400085449219, 291.1199951171875],\n    \"close\" => [289.5199890136719, 293.46990966796875, 290.04998779296875, 290.82000732421875, 291.1199951171875, 291.1199951171875],\n    \"vol\" => [2950791, 2458057, 1362915, 1212217, 1121821, 0]) \n\nConverting it to a DataFrame:\n\njulia> using DataFrames\njulia> data = get_prices.([\"AAPL\",\"NFLX\"],range=\"1d\",interval=\"90m\");\njulia> vcat([DataFrame(i) for i in data]...)\n12×7 DataFrame\n Row │ ticker  timestamp            open     high     low      close    vol      \n     │ String  DateTime             Float64  Float64  Float64  Float64  Int64    \n─────┼───────────────────────────────────────────────────────────────────────────\n   1 │ AAPL    2022-12-29T14:30:00  127.99   129.98   127.73   129.954  29101646\n   2 │ AAPL    2022-12-29T16:00:00  129.96   130.481  129.44   129.998  14058713\n   3 │ AAPL    2022-12-29T17:30:00  129.992  130.098  129.325  130.035   9897737\n   4 │ AAPL    2022-12-29T19:00:00  130.035  130.24   129.7    129.95    9552323\n   5 │ AAPL    2022-12-29T20:30:00  129.95   130.22   129.56   129.6     6308537\n   6 │ AAPL    2022-12-29T21:00:00  129.61   129.61   129.61   129.61          0\n   7 │ NFLX    2022-12-29T14:30:00  283.18   291.87   281.01   289.52    2950791\n   8 │ NFLX    2022-12-29T16:00:00  289.52   295.5    289.49   293.47    2458057\n   9 │ NFLX    2022-12-29T17:30:00  293.42   293.5    289.54   290.05    1362915\n  10 │ NFLX    2022-12-29T19:00:00  290.055  291.32   288.77   290.82    1212217\n  11 │ NFLX    2022-12-29T20:30:00  290.76   292.33   290.54   291.12    1121821\n  12 │ NFLX    2022-12-29T21:00:00  291.12   291.12   291.12   291.12          0\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_quoteSummary-Tuple{String}","page":"All Functions","title":"YFinance.get_quoteSummary","text":"get_quoteSummary(symbol::String; item=nothing)\n\nRetrievs general information from Yahoo Finance stored in a JSON3 object.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nitem can either be a string or multiple items as a Vector of Strings. To see valid items call _QuoteSummary_Items (not all items are available for all types of securities)  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty JSON3.Object is returned.\n\nExamples\n\njulia> get_quoteSummary(\"AAPL\")\n\nJSON3.Object{Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 31 entries:\n:assetProfile             => {…\n:recommendationTrend      => {…\n:cashflowStatementHistory => {…\n\n⋮                         => ⋮\njulia> get_quoteSummary(\"AAPL\",item = \"quoteType\")\nJSON3.Object{Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 13 entries:\n:exchange               => \"NMS\"\n:quoteType              => \"EQUITY\"\n:symbol                 => \"AAPL\"\n⋮                       => ⋮\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_recommendation_trend-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_recommendation_trend","text":"get_recommendation_trend(quoteSummary::JSON3.Object)\n\nRetrievs the recommendation trend from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_recommendation_trend\nOrderedDict{String, Vector} with 6 entries:\n  \"period\"     => [\"0m\", \"-1m\", \"-2m\", \"-3m\"]\n  \"strongbuy\"  => [11, 11, 11, 13]\n  \"buy\"        => [21, 25, 26, 20]\n  \"hold\"       => [6, 6, 5, 8]\n  \"sell\"       => [0, 1, 1, 0]\n  \"strongsell\" => [0, 0, 0, 0]\n\njulia> get_recommendation_trend(\"AAPL\")\nOrderedDict{String, Vector} with 6 entries:\n  \"period\"     => [\"0m\", \"-1m\", \"-2m\", \"-3m\"]\n  \"strongbuy\"  => [11, 11, 11, 13]\n  \"buy\"        => [21, 25, 26, 20]\n  \"hold\"       => [6, 6, 5, 8]\n  \"sell\"       => [0, 1, 1, 0]\n  \"strongsell\" => [0, 0, 0, 0]\n  \njulia> using DataFrames\njulia> get_recommendation_trend(\"AAPL\") |> DataFrame\n4×6 DataFrame\n Row │ period  strongbuy  buy    hold   sell   strongsell \n     │ String  Int64      Int64  Int64  Int64  Int64      \n─────┼────────────────────────────────────────────────────\n   1 │ 0m             11     21      6      0           0\n   2 │ -1m            11     25      6      1           0\n   3 │ -2m            11     26      5      1           0\n   4 │ -3m            13     20      8      0           0\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_sector_industry-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_sector_industry","text":"get_sector_industry(quoteSummary::JSON3.Object)\n\nRetrievs the Sector and Industry from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_sector_industry\nOrderedDict{String, String} with 2 entries:\n  \"sector\"   => \"Technology\"\n  \"industry\" => \"Consumer Electronics\"\n\njulia> get_sector_industry(\"AAPL\")\nOrderedDict{String, String} with 2 entries:\n  \"sector\"   => \"Technology\"\n  \"industry\" => \"Consumer Electronics\"\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_summary_detail-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_summary_detail","text":"get_summary_detail(quoteSummary::JSON3.Object)\n\nRetrievs the summaryDetail Item from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_summary_detail\nOrderedDict{String, Any} with 41 entries:\n  \"priceHint\"                  => 2\n  \"previousClose\"              => 126.04\n  \"open\"                       => 127.99\n  \"dayLow\"                     => 127.815\n  \"dayHigh\"                    => 130.48\n  \"regularMarketPreviousClose\" => 126.04\n  \"regularMarketOpen\"          => 127.99\n  \"regularMarketDayLow\"        => 127.815\n  \"regularMarketDayHigh\"       => 130.48\n  \"dividendRate\"               => 0.92\n  \"dividendYield\"              => 0.0073\n  \"exDividendDate\"             => 1667520000\n  \"payoutRatio\"                => 0.1473\n  \"fiveYearAvgDividendYield\"   => 0.99\n  \"beta\"                       => 1.21947\n  \"trailingPE\"                 => 21.2128\n  \"forwardPE\"                  => 19.1448\n  ⋮                            => ⋮\n\njulia> get_summary_detail(\"AAPL\")\nOrderedDict{String, Any} with 41 entries:\n  \"priceHint\"                  => 2\n  \"previousClose\"              => 126.04\n  \"open\"                       => 127.99\n  \"dayLow\"                     => 127.815\n  \"dayHigh\"                    => 130.48\n  \"regularMarketPreviousClose\" => 126.04\n  \"regularMarketOpen\"          => 127.99\n  \"regularMarketDayLow\"        => 127.815\n  \"regularMarketDayHigh\"       => 130.48\n  \"dividendRate\"               => 0.92\n  \"dividendYield\"              => 0.0073\n  \"exDividendDate\"             => 1667520000\n  \"payoutRatio\"                => 0.1473\n  \"fiveYearAvgDividendYield\"   => 0.99\n  \"beta\"                       => 1.21947\n  \"trailingPE\"                 => 21.2128\n  \"forwardPE\"                  => 19.1448\n  ⋮                            => ⋮\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_symbols-Tuple{String}","page":"All Functions","title":"YFinance.get_symbols","text":"get_symbols(search_term::String)\n\nAllows searches for specific securities.\n\nArguments\n\nsearch_term::String: Typically a company/security name (e.g. microsoft)\n\nReturns\n\nJSON3.Array{JSON3.Object}: Each array element is a JSON3.Object search results contiangint the following keys:\nexchange, shortname, quoteType, symbol, index, score, typeDisp, longname, exchDisp, isYahooFinance\nIf no match was found an empty JSON3.Array is returned.\n\nExample\n\njulia> get_symbols(\"micro\")\n7-element JSON3.Array{JSON3.Object, Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}}:\n {\n         \"exchange\": \"CMX\",\n        \"shortname\": \"Micro Gold Futures,Jun-2023\",\n        \"quoteType\": \"FUTURE\",\n           \"symbol\": \"MGC=F\",\n            \"index\": \"quotes\",\n            \"score\": 3179100,\n         \"typeDisp\": \"Future\",\n         \"exchDisp\": \"New York Commodity Exchange\",\n   \"isYahooFinance\": true\n}\n {\n         \"exchange\": \"NMS\",\n        \"shortname\": \"Microsoft Corporation\",\n        \"quoteType\": \"EQUITY\",\n           \"symbol\": \"MSFT\",\n            \"index\": \"quotes\",\n            \"score\": 274384,\n         \"typeDisp\": \"Equity\",\n         \"longname\": \"Microsoft Corporation\",\n         \"exchDisp\": \"NASDAQ\",\n           \"sector\": \"Technology\",\n         \"industry\": \"Software—Infrastructure\",\n   \"isYahooFinance\": true\n}\n {\n         \"exchange\": \"NMS\",\n        \"shortname\": \"Micron Technology, Inc.\",\n        \"quoteType\": \"EQUITY\",\n           \"symbol\": \"MU\",\n            \"index\": \"quotes\",\n            \"score\": 265579,\n         \"typeDisp\": \"Equity\",\n         \"longname\": \"Micron Technology, Inc.\",\n         \"exchDisp\": \"NASDAQ\",\n           \"sector\": \"Technology\",\n         \"industry\": \"Semiconductors\",\n   \"isYahooFinance\": true\n}\n {\n         \"exchange\": \"NMS\",\n        \"shortname\": \"Advanced Micro Devices, Inc.\",\n        \"quoteType\": \"EQUITY\",\n           \"symbol\": \"AMD\",\n            \"index\": \"quotes\",\n            \"score\": 252946,\n         \"typeDisp\": \"Equity\",\n         \"longname\": \"Advanced Micro Devices, Inc.\",\n         \"exchDisp\": \"NASDAQ\",\n           \"sector\": \"Technology\",\n         \"industry\": \"Semiconductors\",\n   \"isYahooFinance\": true\n}\n {\n         \"exchange\": \"NMS\",\n        \"shortname\": \"MicroStrategy Incorporated\",\n        \"quoteType\": \"EQUITY\",\n           \"symbol\": \"MSTR\",\n            \"index\": \"quotes\",\n            \"score\": 52264,\n         \"typeDisp\": \"Equity\",\n         \"longname\": \"MicroStrategy Incorporated\",\n         \"exchDisp\": \"NASDAQ\",\n           \"sector\": \"Technology\",\n         \"industry\": \"Software—Application\",\n   \"isYahooFinance\": true\n}\n {\n         \"exchange\": \"NMS\",\n        \"shortname\": \"Super Micro Computer, Inc.\",\n        \"quoteType\": \"EQUITY\",\n           \"symbol\": \"SMCI\",\n            \"index\": \"quotes\",\n            \"score\": 38924,\n         \"typeDisp\": \"Equity\",\n         \"longname\": \"Super Micro Computer, Inc.\",\n         \"exchDisp\": \"NASDAQ\",\n           \"sector\": \"Technology\",\n         \"industry\": \"Computer Hardware\",\n   \"isYahooFinance\": true\n}\n {\n         \"exchange\": \"PCX\",\n        \"shortname\": \"MicroSectors FANG  Index 3X Lev\",\n        \"quoteType\": \"ETF\",\n           \"symbol\": \"FNGU\",\n            \"index\": \"quotes\",\n            \"score\": 33432,\n         \"typeDisp\": \"ETF\",\n         \"longname\": \"MicroSectors FANG+ Index 3X Leveraged ETN\",\n         \"exchDisp\": \"NYSEArca\",\n   \"isYahooFinance\": true\n}\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_upgrade_downgrade_history-Tuple{JSON3.Object}","page":"All Functions","title":"YFinance.get_upgrade_downgrade_history","text":"get_upgrade_downgrade_history(quoteSummary::JSON3.Object)\n\nRetrievs the upgrade and downgrade history from the quote summary.\n\nArguments\n\nCan be either a JSON3.Object returned from get_quoteSummary(symbol::String; item=nothing,throw_error=false) or a ticker symbol of type AbstractString If a ticker symbol is provided get_quoteSummary(symbol::String) is called first. \n\nExamples\n\njulia> get_quoteSummary(\"AAPL\") |> get_upgrade_downgrade_history\nOrderedDict{String, Vector} with 5 entries:\n  \"firm\"      => [\"JP Morgan\", \"UBS\", \"Morgan Stanley\", \"B of A Securities\", \"Barclays\", …  \n  \"date\"      => Union{Missing, DateTime}[DateTime(\"2022-12-20T11:47:33\"), DateTime(\"2022…  \n  \"toGrade\"   => Union{Missing, String}[\"Overweight\", \"Buy\", \"Overweight\", \"Neutral\", \"Eq…  \n  \"fromGrade\" => Union{Missing, String}[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"  …  \"\", \"\"…  \n  \"action\"    => Union{Missing, String}[\"main\", \"main\", \"main\", \"main\", \"main\", \"main\", \"…\n\njulia> get_upgrade_downgrade_history(\"AAPL\")\nOrderedDict{String, Vector} with 5 entries:\n  \"firm\"      => [\"JP Morgan\", \"UBS\", \"Morgan Stanley\", \"B of A Securities\", \"Barclays\", …  \n  \"date\"      => Union{Missing, DateTime}[DateTime(\"2022-12-20T11:47:33\"), DateTime(\"2022…  \n  \"toGrade\"   => Union{Missing, String}[\"Overweight\", \"Buy\", \"Overweight\", \"Neutral\", \"Eq…  \n  \"fromGrade\" => Union{Missing, String}[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"  …  \"\", \"\"…  \n  \"action\"    => Union{Missing, String}[\"main\", \"main\", \"main\", \"main\", \"main\", \"main\", \"…\n  \njulia> using DataFrames\njulia> get_upgrade_downgrade_history(\"AAPL\") |> DataFrame\n872×5 DataFrame\n Row │ firm               date                 toGrade       fromGrade  action  \n     │ String             DateTime?            String?       String?    String? \n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ JP Morgan          2022-12-20T11:47:33  Overweight               main\n   2 │ UBS                2022-11-08T12:17:03  Buy                      main\n   3 │ Morgan Stanley     2022-11-08T12:14:23  Overweight               main\n   4 │ B of A Securities  2022-11-07T13:08:30  Neutral                  main\n   5 │ Barclays           2022-11-07T12:39:27  Equal-Weight             main\n   6 │ Wedbush            2022-10-28T13:19:17  Outperform               main\n   7 │ Credit Suisse      2022-10-28T11:59:30  Outperform               main\n  ⋮  │         ⋮                   ⋮                ⋮            ⋮         ⋮\n 867 │ Oxen Group         2012-03-14T15:25:00  Buy                      init\n 868 │ Canaccord Genuity  2012-03-14T08:21:00  Buy                      main\n 869 │ Morgan Stanley     2012-03-14T06:13:00  Overweight               main\n 870 │ Jefferies          2012-03-13T06:08:00  Buy                      main\n 871 │ FBN Securities     2012-03-08T07:33:00  Outperform               main\n 872 │ Canaccord Genuity  2012-02-09T08:17:00  Buy                      main\n                                                                859 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_valid_symbols-Tuple{AbstractString}","page":"All Functions","title":"YFinance.get_valid_symbols","text":"get_valid_symbols(symbol::AbstractString)\n\nTakes a symbol. If the symbol is valid it returns the symbol in a vector if not it returns and empy vector.\n\nArguments\n\nsmybol::AbstractString is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \n\nExamples\n\njulia> get_valid_symbols(\"AAPL\")\n1-element Vector{String}:\n \"AAPL\"\n\njulia> get_valid_symbols(\"asdfs\")\n String[]\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.get_valid_symbols-Tuple{AbstractVector{<:AbstractString}}","page":"All Functions","title":"YFinance.get_valid_symbols","text":"get_valid_symbols(symbol::AbstractVector{<:AbstractString})\n\nTakes a AbstractVector of symbols and returns only the valid ones.\n\nArguments\n\nsmybol::AbstractVector{<:AbstractString} is a vector of tickers (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \n\nExamples\n\njulia> get_valid_symbols(\"AAPL\",\"AMD\",\"asdfs\")\n2-element Vector{String}:\n \"AAPL\"\n \"AMD\"\n\n\n\n\n\n","category":"method"},{"location":"AllFunctions/#YFinance.validate_symbol-Tuple{AbstractString}","page":"All Functions","title":"YFinance.validate_symbol","text":"validate_symbol(symbol::AbstractString)\n\nValidates a Symbol (Ticker). Returns true if the ticker is valid and false if the ticker is not valid.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \n\nHow it works\n\nChecks if the HTTP request works (status 200) or whether the request errors (common status in this case: 404)    \n\n\n\n\n\n","category":"method"},{"location":"Fundamental/#Download-Fundamental-Data","page":"Fundamental","title":"Download Fundamental Data","text":"","category":"section"},{"location":"Fundamental/","page":"Fundamental","title":"Fundamental","text":"get_Fundamental","category":"page"},{"location":"Fundamental/#YFinance.get_Fundamental","page":"Fundamental","title":"YFinance.get_Fundamental","text":"get_Fundamental(symbol::AbstractString, item::AbstractString,interval::AbstractString, startdt, enddt)\n\nRetrievs financial statement information from Yahoo Finance stored in a OrderedCollections.OrderedDict.\n\nArguments\n\nsmybol::String is a ticker (e.g. AAPL for Apple Computers, or ^GSPC for the S&P500)  \nitem::String can either be an entire financial statement or a subitem. Entire financial statements:\"income_statement\", \"valuation\", \"cash_flow\", \"balance_sheet\". To see valid sub items grouped by financial statement type in a OrderedCollections.OrderedDict call _Fundamental_Types  \ninterval::String can be one of \"annual\", \"quarterly\", \"monthly\"  \nstartdt and enddt take the following types: ::Date,::DateTime, or a String of the following form yyyy-mm-dd  \nthrow_error::Bool defaults to false. If set to true the function errors when the ticker is not valid. Else a warning is given and an empty OrderedCollections.OrderedDict is returned.\n\nExamples\n\njulia> get_Fundamental(\"NFLX\", \"income_statement\",\"quarterly\",\"2000-01-01\",\"2022-12-31\")\nOrderedDict{String, Any} with 40 entries:\n  \"timestamp\"                       => [DateTime(\"2021-12-31T00:00:00\"), DateTime(\"2022-0…  \"GeneralAndAdministrativeExpense\" => Any[397790000, 397928000, 409297000, 373213000]    \n  \"SellingGeneralAndAdministration\" => Any[1190503000, 953906000, 984257000, 941167000]   \n  \"InterestIncome\"                  => Any[108512000, 195645000, 220226000, 261404000]    \n  \"OperatingRevenue\"                => Any[7709318000, 7867767000, 7970141000, 7925589000]  \"DilutedNIAvailtoComStockholders\" => Any[607429000, 1597447000, 1440951000, 1398242000] \n  \"NormalizedIncome\"                => Any[607429000, 1597447000, 1440951000, 1398242000] \n  \"NetIncomeCommonStockholders\"     => Any[607429000, 1597447000, 1440951000, 1398242000] \n  \"BasicAverageShares\"              => Any[443462000, 444146000, 444557000, 444878000]    \n  ⋮                                 => ⋮\n\n\njulia> using DataFrames\njulia> get_Fundamental(\"AAPL\", \"InterestExpense\",\"quarterly\",\"2000-01-01\",\"2022-12-31\") |> DataFrame\n4×2 DataFrame\n Row │ timestamp            InterestExpense \n     │ DateTime             Any\n─────┼──────────────────────────────────────\n   1 │ 2021-12-31T00:00:00  694000000\n   2 │ 2022-03-31T00:00:00  691000000\n   3 │ 2022-06-30T00:00:00  719000000\n   4 │ 2022-09-30T00:00:00  827000000\n\n\n\n\n\n","category":"function"},{"location":"Proxies/#HTTP-Proxy-Settings","page":"Proxy","title":"HTTP Proxy Settings","text":"","category":"section"},{"location":"Proxies/","page":"Proxy","title":"Proxy","text":"Proxy settings are stored in the global variable PROXYSETTINGS","category":"page"},{"location":"Proxies/","page":"Proxy","title":"Proxy","text":"create_proxy_settings\nclear_proxy_settings","category":"page"},{"location":"Proxies/#YFinance.create_proxy_settings","page":"Proxy","title":"YFinance.create_proxy_settings","text":"create_proxy_settings(p::AbstractString,user=nothing,password=nothing)\n\nSets the global proxy variable _PROXY_SETTINGS::NamedTuple. This NamedTuple contains a proxy and a auth field. These fields default to nothing and and empty Dict respectively.\n\nArguments\n\np::String (Required) of the form: \"http://proxy.xyz.com:8080\"\nuser::String Username (optional) only required if proxy requires authentication. Defaults to nothing (no authentication needed)\npassword::String The password corresponding to the Username. Defaults to nothing (no authentication needed) \n\n\n\n\n\n","category":"function"},{"location":"Proxies/#YFinance.clear_proxy_settings","page":"Proxy","title":"YFinance.clear_proxy_settings","text":"clear_proxy_settings()\n\nClears the proxy settings by setting them back to their default (no proxy configuration).    \n\n\n\n\n\n","category":"function"},{"location":"#YFinance.jl","page":"Home","title":"YFinance.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GitHub Repo: https://github.com/eohne/YFinance.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Download price, fundamental, and option data from Yahoo Finance   This is a side project and my first package so do not expect too much. ","category":"page"},{"location":"#***-LEGAL-DISCLAIMER-***","page":"Home","title":"*** LEGAL DISCLAIMER ***","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Yahoo!, Y!Finance, and Yahoo! finance are registered trademarks of Yahoo, Inc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"YFinance.jl is not endorsed or in anyway affiliated with Yahoo, Inc. The data retreived can only be used for personal use.  Please see Yahoo's terms of use to ensure that you can use the data:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Yahoo Developer API Terms of Use\nYahoo Terms of Service\nYahoo Terms","category":"page"},{"location":"#***-No-decryption-issues-***","page":"Home","title":"*** No decryption issues ***","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The implementation of YFinance.jl is similar to the python package yahooquery in that it accesses data through API endpoints. Therefore, YFinance.jl does not experience the same decryption issues that python’s yfinance faces at the moment.","category":"page"},{"location":"#What-you-can-download","page":"Home","title":"What you can download","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Price data (including intraday)\nFundamental data\nOption Data\nESG Data\nquoteSummary data (this is a JSON3.object that contains a multitude of different information)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is registered in the General registry","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can install the YFinance package by entering the package manager and typing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add YFinance ","category":"page"},{"location":"","page":"Home","title":"Home","text":"You could also install the package by first calling using Pkg:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"YFinance\") ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To load the package simply type the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using YFinance","category":"page"}]
}
